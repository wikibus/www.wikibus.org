/*!
 * jQuery Form Plugin
 * version: 3.51.0-2014.06.20
 * Requires jQuery v1.5 or later
 * Copyright (c) 2014 M. Alsup
 * Examples and documentation at: http://malsup.com/jquery/form/
 * Project repository: https://github.com/malsup/form
 * Dual licensed under the MIT and GPL licenses.
 * https://github.com/malsup/form#copyright-and-license
 */
!(function (e) {
  typeof define === 'function' && define.amd ? define(['jquery'], e) : e(typeof jQuery !== 'undefined' ? jQuery : window.Zepto)
}((e) => {
  function t(t) { const r = t.data; t.isDefaultPrevented() || (t.preventDefault(), e(t.target).ajaxSubmit(r)) } function r(t) { let r = t.target; const a = e(r); if (!a.is('[type=submit],[type=image]')) { const n = a.closest('[type=submit]'); if (n.length === 0) return; r = n[0] } const i = this; if (i.clk = r, r.type == 'image') if (void 0 !== t.offsetX)i.clk_x = t.offsetX, i.clk_y = t.offsetY; else if (typeof e.fn.offset === 'function') { const o = a.offset(); i.clk_x = t.pageX - o.left, i.clk_y = t.pageY - o.top } else i.clk_x = t.pageX - r.offsetLeft, i.clk_y = t.pageY - r.offsetTop; setTimeout(() => { i.clk = i.clk_x = i.clk_y = null }, 100) } function a() { if (e.fn.ajaxSubmit.debug) { const t = `[jquery.form] ${Array.prototype.join.call(arguments, '')}`; window.console && window.console.log ? window.console.log(t) : window.opera && window.opera.postError && window.opera.postError(t) } } const n = {}; n.fileapi = void 0 !== e("<input type='file'/>").get(0).files, n.formdata = void 0 !== window.FormData; const i = !!e.fn.prop; e.fn.attr2 = function () { if (!i) return this.attr.apply(this, arguments); const e = this.prop.apply(this, arguments); return e && e.jquery || typeof e === 'string' ? e : this.attr.apply(this, arguments) }, e.fn.ajaxSubmit = function (t) { function r(r) { let a; let n; const i = e.param(r, t.traditional).split('&'); const o = i.length; const s = []; for (a = 0; o > a; a++)i[a] = i[a].replace(/\+/g, ' '), n = i[a].split('='), s.push([decodeURIComponent(n[0]), decodeURIComponent(n[1])]); return s } function o(a) { for (var n = new FormData(), i = 0; i < a.length; i++)n.append(a[i].name, a[i].value); if (t.extraData) { const o = r(t.extraData); for (i = 0; i < o.length; i++)o[i] && n.append(o[i][0], o[i][1]) }t.data = null; const s = e.extend(!0, {}, e.ajaxSettings, t, { contentType: !1, processData: !1, cache: !1, type: u || 'POST' }); t.uploadProgress && (s.xhr = function () { const r = e.ajaxSettings.xhr(); return r.upload && r.upload.addEventListener('progress', (e) => { let r = 0; const a = e.loaded || e.position; const n = e.total; e.lengthComputable && (r = Math.ceil(a / n * 100)), t.uploadProgress(e, a, n, r) }, !1), r }), s.data = null; const c = s.beforeSend; return s.beforeSend = function (e, r) { r.data = t.formData ? t.formData : n, c && c.call(this, e, r) }, e.ajax(s) } function s(r) { function n(e) { let t = null; try { e.contentWindow && (t = e.contentWindow.document) } catch (r) { a(`cannot get iframe.contentWindow document: ${r}`) } if (t) return t; try { t = e.contentDocument ? e.contentDocument : e.document } catch (r) { a(`cannot get iframe.contentDocument: ${r}`), t = e.document } return t } function o() { function t() { try { const e = n(g).readyState; a(`state = ${e}`), e && e.toLowerCase() == 'uninitialized' && setTimeout(t, 50) } catch (r) { a('Server abort: ', r, ' (', r.name, ')'), s(k), j && clearTimeout(j), j = void 0 } } const r = f.attr2('target'); const i = f.attr2('action'); const o = 'multipart/form-data'; const c = f.attr('enctype') || f.attr('encoding') || o; w.setAttribute('target', p), (!u || /post/i.test(u)) && w.setAttribute('method', 'POST'), i != m.url && w.setAttribute('action', m.url), m.skipEncodingOverride || u && !/post/i.test(u) || f.attr({ encoding: 'multipart/form-data', enctype: 'multipart/form-data' }), m.timeout && (j = setTimeout(() => { T = !0, s(D) }, m.timeout)); const l = []; try { if (m.extraData) for (const d in m.extraData)m.extraData.hasOwnProperty(d) && l.push(e.isPlainObject(m.extraData[d]) && m.extraData[d].hasOwnProperty('name') && m.extraData[d].hasOwnProperty('value') ? e(`<input type="hidden" name="${m.extraData[d].name}">`).val(m.extraData[d].value).appendTo(w)[0] : e(`<input type="hidden" name="${d}">`).val(m.extraData[d]).appendTo(w)[0]); m.iframeTarget || v.appendTo('body'), g.attachEvent ? g.attachEvent('onload', s) : g.addEventListener('load', s, !1), setTimeout(t, 15); try { w.submit() } catch (h) { const x = document.createElement('form').submit; x.apply(w) } } finally { w.setAttribute('action', i), w.setAttribute('enctype', c), r ? w.setAttribute('target', r) : f.removeAttr('target'), e(l).remove() } } function s(t) { if (!x.aborted && !F) { if (M = n(g), M || (a('cannot access response document'), t = k), t === D && x) return x.abort('timeout'), void S.reject(x, 'timeout'); if (t == k && x) return x.abort('server abort'), void S.reject(x, 'error', 'server abort'); if (M && M.location.href != m.iframeSrc || T) { g.detachEvent ? g.detachEvent('onload', s) : g.removeEventListener('load', s, !1); let r; let i = 'success'; try { if (T) throw 'timeout'; const o = m.dataType == 'xml' || M.XMLDocument || e.isXMLDoc(M); if (a(`isXml=${o}`), !o && window.opera && (M.body === null || !M.body.innerHTML) && --O) return a('requeing onLoad callback, DOM not available'), void setTimeout(s, 250); const u = M.body ? M.body : M.documentElement; x.responseText = u ? u.innerHTML : null, x.responseXML = M.XMLDocument ? M.XMLDocument : M, o && (m.dataType = 'xml'), x.getResponseHeader = function (e) { const t = { 'content-type': m.dataType }; return t[e.toLowerCase()] }, u && (x.status = Number(u.getAttribute('status')) || x.status, x.statusText = u.getAttribute('statusText') || x.statusText); const c = (m.dataType || '').toLowerCase(); const l = /(json|script|text)/.test(c); if (l || m.textarea) { const f = M.getElementsByTagName('textarea')[0]; if (f)x.responseText = f.value, x.status = Number(f.getAttribute('status')) || x.status, x.statusText = f.getAttribute('statusText') || x.statusText; else if (l) { const p = M.getElementsByTagName('pre')[0]; const h = M.getElementsByTagName('body')[0]; p ? x.responseText = p.textContent ? p.textContent : p.innerText : h && (x.responseText = h.textContent ? h.textContent : h.innerText) } } else c == 'xml' && !x.responseXML && x.responseText && (x.responseXML = X(x.responseText)); try { E = _(x, c, m) } catch (y) { i = 'parsererror', x.error = r = y || i } } catch (y) { a('error caught: ', y), i = 'error', x.error = r = y || i }x.aborted && (a('upload aborted'), i = null), x.status && (i = x.status >= 200 && x.status < 300 || x.status === 304 ? 'success' : 'error'), i === 'success' ? (m.success && m.success.call(m.context, E, 'success', x), S.resolve(x.responseText, 'success', x), d && e.event.trigger('ajaxSuccess', [x, m])) : i && (void 0 === r && (r = x.statusText), m.error && m.error.call(m.context, x, i, r), S.reject(x, 'error', r), d && e.event.trigger('ajaxError', [x, m, r])), d && e.event.trigger('ajaxComplete', [x, m]), d && !--e.active && e.event.trigger('ajaxStop'), m.complete && m.complete.call(m.context, x, i), F = !0, m.timeout && clearTimeout(j), setTimeout(() => { m.iframeTarget ? v.attr('src', m.iframeSrc) : v.remove(), x.responseXML = null }, 100) } } } let c; let l; let m; let d; let p; let v; let g; let x; let y; let b; let T; let j; var w = f[0]; var S = e.Deferred(); if (S.abort = function (e) { x.abort(e) }, r) for (l = 0; l < h.length; l++)c = e(h[l]), i ? c.prop('disabled', !1) : c.removeAttr('disabled'); if (m = e.extend(!0, {}, e.ajaxSettings, t), m.context = m.context || m, p = `jqFormIO${(new Date()).getTime()}`, m.iframeTarget ? (v = e(m.iframeTarget), b = v.attr2('name'), b ? p = b : v.attr2('name', p)) : (v = e(`<iframe name="${p}" src="${m.iframeSrc}" />`), v.css({ position: 'absolute', top: '-1000px', left: '-1000px' })), g = v[0], x = { aborted: 0, responseText: null, responseXML: null, status: 0, statusText: 'n/a', getAllResponseHeaders() {}, getResponseHeader() {}, setRequestHeader() {}, abort(t) { const r = t === 'timeout' ? 'timeout' : 'aborted'; a(`aborting upload... ${r}`), this.aborted = 1; try { g.contentWindow.document.execCommand && g.contentWindow.document.execCommand('Stop') } catch (n) {}v.attr('src', m.iframeSrc), x.error = r, m.error && m.error.call(m.context, x, r, t), d && e.event.trigger('ajaxError', [x, m, r]), m.complete && m.complete.call(m.context, x, r) } }, d = m.global, d && e.active++ === 0 && e.event.trigger('ajaxStart'), d && e.event.trigger('ajaxSend', [x, m]), m.beforeSend && m.beforeSend.call(m.context, x, m) === !1) return m.global && e.active--, S.reject(), S; if (x.aborted) return S.reject(), S; y = w.clk, y && (b = y.name, b && !y.disabled && (m.extraData = m.extraData || {}, m.extraData[b] = y.value, y.type == 'image' && (m.extraData[`${b}.x`] = w.clk_x, m.extraData[`${b}.y`] = w.clk_y))); var D = 1; var k = 2; const A = e('meta[name=csrf-token]').attr('content'); const L = e('meta[name=csrf-param]').attr('content'); L && A && (m.extraData = m.extraData || {}, m.extraData[L] = A), m.forceSync ? o() : setTimeout(o, 10); let E; let M; let F; var O = 50; var X = e.parseXML || function (e, t) { return window.ActiveXObject ? (t = new ActiveXObject('Microsoft.XMLDOM'), t.async = 'false', t.loadXML(e)) : t = (new DOMParser()).parseFromString(e, 'text/xml'), t && t.documentElement && t.documentElement.nodeName != 'parsererror' ? t : null }; const C = e.parseJSON || function (e) { return window.eval(`(${e})`) }; var _ = function (t, r, a) { const n = t.getResponseHeader('content-type') || ''; const i = r === 'xml' || !r && n.indexOf('xml') >= 0; let o = i ? t.responseXML : t.responseText; return i && o.documentElement.nodeName === 'parsererror' && e.error && e.error('parsererror'), a && a.dataFilter && (o = a.dataFilter(o, r)), typeof o === 'string' && (r === 'json' || !r && n.indexOf('json') >= 0 ? o = C(o) : (r === 'script' || !r && n.indexOf('javascript') >= 0) && e.globalEval(o)), o }; return S } if (!this.length) return a('ajaxSubmit: skipping submit process - no element selected'), this; let u; let c; let l; var f = this; typeof t === 'function' ? t = { success: t } : void 0 === t && (t = {}), u = t.type || this.attr2('method'), c = t.url || this.attr2('action'), l = typeof c === 'string' ? e.trim(c) : '', l = l || window.location.href || '', l && (l = (l.match(/^([^#]+)/) || [])[1]), t = e.extend(!0, { url: l, success: e.ajaxSettings.success, type: u || e.ajaxSettings.type, iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank' }, t); const m = {}; if (this.trigger('form-pre-serialize', [this, t, m]), m.veto) return a('ajaxSubmit: submit vetoed via form-pre-serialize trigger'), this; if (t.beforeSerialize && t.beforeSerialize(this, t) === !1) return a('ajaxSubmit: submit aborted via beforeSerialize callback'), this; let d = t.traditional; void 0 === d && (d = e.ajaxSettings.traditional); let p; var h = []; const v = this.formToArray(t.semantic, h); if (t.data && (t.extraData = t.data, p = e.param(t.data, d)), t.beforeSubmit && t.beforeSubmit(v, this, t) === !1) return a('ajaxSubmit: submit aborted via beforeSubmit callback'), this; if (this.trigger('form-submit-validate', [v, this, t, m]), m.veto) return a('ajaxSubmit: submit vetoed via form-submit-validate trigger'), this; let g = e.param(v, d); p && (g = g ? `${g}&${p}` : p), t.type.toUpperCase() == 'GET' ? (t.url += (t.url.indexOf('?') >= 0 ? '&' : '?') + g, t.data = null) : t.data = g; const x = []; if (t.resetForm && x.push(() => { f.resetForm() }), t.clearForm && x.push(() => { f.clearForm(t.includeHidden) }), !t.dataType && t.target) { const y = t.success || function () {}; x.push(function (r) { const a = t.replaceTarget ? 'replaceWith' : 'html'; e(t.target)[a](r).each(y, arguments) }) } else t.success && x.push(t.success); if (t.success = function (e, r, a) { for (let n = t.context || this, i = 0, o = x.length; o > i; i++)x[i].apply(n, [e, r, a || f, f]) }, t.error) { const b = t.error; t.error = function (e, r, a) { const n = t.context || this; b.apply(n, [e, r, a, f]) } } if (t.complete) { const T = t.complete; t.complete = function (e, r) { const a = t.context || this; T.apply(a, [e, r, f]) } } const j = e('input[type=file]:enabled', this).filter(function () { return e(this).val() !== '' }); const w = j.length > 0; const S = 'multipart/form-data'; const D = f.attr('enctype') == S || f.attr('encoding') == S; const k = n.fileapi && n.formdata; a(`fileAPI :${k}`); let A; const L = (w || D) && !k; t.iframe !== !1 && (t.iframe || L) ? t.closeKeepAlive ? e.get(t.closeKeepAlive, () => { A = s(v) }) : A = s(v) : A = (w || D) && k ? o(v) : e.ajax(t), f.removeData('jqxhr').data('jqxhr', A); for (let E = 0; E < h.length; E++)h[E] = null; return this.trigger('form-submit-notify', [this, t]), this }, e.fn.ajaxForm = function (n) { if (n = n || {}, n.delegation = n.delegation && e.isFunction(e.fn.on), !n.delegation && this.length === 0) { const i = { s: this.selector, c: this.context }; return !e.isReady && i.s ? (a('DOM not ready, queuing ajaxForm'), e(() => { e(i.s, i.c).ajaxForm(n) }), this) : (a(`terminating; zero elements found by selector${e.isReady ? '' : ' (DOM not ready)'}`), this) } return n.delegation ? (e(document).off('submit.form-plugin', this.selector, t).off('click.form-plugin', this.selector, r).on('submit.form-plugin', this.selector, n, t).on('click.form-plugin', this.selector, n, r), this) : this.ajaxFormUnbind().bind('submit.form-plugin', n, t).bind('click.form-plugin', n, r) }, e.fn.ajaxFormUnbind = function () { return this.unbind('submit.form-plugin click.form-plugin') }, e.fn.formToArray = function (t, r) { const a = []; if (this.length === 0) return a; let i; const o = this[0]; const s = this.attr('id'); let u = t ? o.getElementsByTagName('*') : o.elements; if (u && !/MSIE [678]/.test(navigator.userAgent) && (u = e(u).get()), s && (i = e(`:input[form="${s}"]`).get(), i.length && (u = (u || []).concat(i))), !u || !u.length) return a; let c, l, f, m, d, p, h; for (c = 0, p = u.length; p > c; c++) if (d = u[c], f = d.name, f && !d.disabled) if (t && o.clk && d.type == 'image')o.clk == d && (a.push({ name: f, value: e(d).val(), type: d.type }), a.push({ name: `${f}.x`, value: o.clk_x }, { name: `${f}.y`, value: o.clk_y })); else if (m = e.fieldValue(d, !0), m && m.constructor == Array) for (r && r.push(d), l = 0, h = m.length; h > l; l++)a.push({ name: f, value: m[l] }); else if (n.fileapi && d.type == 'file') { r && r.push(d); const v = d.files; if (v.length) for (l = 0; l < v.length; l++)a.push({ name: f, value: v[l], type: d.type }); else a.push({ name: f, value: '', type: d.type }) } else m !== null && typeof m !== 'undefined' && (r && r.push(d), a.push({ name: f, value: m, type: d.type, required: d.required })); if (!t && o.clk) { const g = e(o.clk); const x = g[0]; f = x.name, f && !x.disabled && x.type == 'image' && (a.push({ name: f, value: g.val() }), a.push({ name: `${f}.x`, value: o.clk_x }, { name: `${f}.y`, value: o.clk_y })) } return a }, e.fn.formSerialize = function (t) { return e.param(this.formToArray(t)) }, e.fn.fieldSerialize = function (t) { const r = []; return this.each(function () { const a = this.name; if (a) { const n = e.fieldValue(this, t); if (n && n.constructor == Array) for (let i = 0, o = n.length; o > i; i++)r.push({ name: a, value: n[i] }); else n !== null && typeof n !== 'undefined' && r.push({ name: this.name, value: n }) } }), e.param(r) }, e.fn.fieldValue = function (t) { for (var r = [], a = 0, n = this.length; n > a; a++) { const i = this[a]; const o = e.fieldValue(i, t); o === null || typeof o === 'undefined' || o.constructor == Array && !o.length || (o.constructor == Array ? e.merge(r, o) : r.push(o)) } return r }, e.fieldValue = function (t, r) { const a = t.name; const n = t.type; const i = t.tagName.toLowerCase(); if (void 0 === r && (r = !0), r && (!a || t.disabled || n == 'reset' || n == 'button' || (n == 'checkbox' || n == 'radio') && !t.checked || (n == 'submit' || n == 'image') && t.form && t.form.clk != t || i == 'select' && t.selectedIndex == -1)) return null; if (i == 'select') { const o = t.selectedIndex; if (o < 0) return null; for (var s = [], u = t.options, c = n == 'select-one', l = c ? o + 1 : u.length, f = c ? o : 0; l > f; f++) { const m = u[f]; if (m.selected) { let d = m.value; if (d || (d = m.attributes && m.attributes.value && !m.attributes.value.specified ? m.text : m.value), c) return d; s.push(d) } } return s } return e(t).val() }, e.fn.clearForm = function (t) { return this.each(function () { e('input,select,textarea', this).clearFields(t) }) }, e.fn.clearFields = e.fn.clearInputs = function (t) { const r = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; return this.each(function () { const a = this.type; const n = this.tagName.toLowerCase(); r.test(a) || n == 'textarea' ? this.value = '' : a == 'checkbox' || a == 'radio' ? this.checked = !1 : n == 'select' ? this.selectedIndex = -1 : a == 'file' ? /MSIE/.test(navigator.userAgent) ? e(this).replaceWith(e(this).clone(!0)) : e(this).val('') : t && (t === !0 && /hidden/.test(a) || typeof t === 'string' && e(this).is(t)) && (this.value = '') }) }, e.fn.resetForm = function () { return this.each(function () { (typeof this.reset === 'function' || typeof this.reset === 'object' && !this.reset.nodeType) && this.reset() }) }, e.fn.enable = function (e) { return void 0 === e && (e = !0), this.each(function () { this.disabled = !e }) }, e.fn.selected = function (t) { return void 0 === t && (t = !0), this.each(function () { const r = this.type; if (r == 'checkbox' || r == 'radio') this.checked = t; else if (this.tagName.toLowerCase() == 'option') { const a = e(this).parent('select'); t && a[0] && a[0].type == 'select-one' && a.find('option').selected(!1), this.selected = t } }) }, e.fn.ajaxSubmit.debug = !1
}))
