/* -----------------------------------------------------------
   Select Splitter
   + https://github.com/xavierfaucon/bootstrap-selectsplitter
----------------------------------------------------------- */
+(function (e) {
  function t(t) { return this.each(function () { const l = e(this); let s = l.data('selectsplitter'); const o = typeof t === 'object' && t; (s || t != 'destroy') && (s || l.data('selectsplitter', s = new r(this, o)), typeof t === 'string' && s[t]()) }) } var r = function (e, t) { this.init('selectsplitter', e, t) }; r.DEFAULTS = { template: '<div class="row" data-selectsplitter-wrapper-selector><div class="col-xs-12 col-sm-6"><select class="form-control" data-selectsplitter-firstselect-selector></select></div> <!-- Add the extra clearfix for only the required viewport --><div class="clearfix visible-xs-block"></div><div class="col-xs-12 col-sm-6"><select class="form-control" data-selectsplitter-secondselect-selector></select></div></div>' }, r.prototype.init = function (t, l, s) { const o = this; o.type = t, o.$element = e(l), o.$element.hide(), o.options = e.extend({}, r.DEFAULTS, s), o.fullCategoryList = {}; let a = 0; let n = 0; o.$element.find('optgroup').each(function () { o.fullCategoryList[e(this).attr('label')] = {}; const t = e(this); let r = 0; const l = {}; e(this).find('option').each(function () { const t = e(this).attr('value'); const s = e(this).text(); l[e(this).index()] = { x: t, y: s }, r++ }), r > n && (n = r), o.fullCategoryList[t.attr('label')] = l, a++ }); let i = ''; for (const c in o.fullCategoryList)o.fullCategoryList.hasOwnProperty(c) && (i = `${i}<option>${c}</option>`); o.$element.after(o.options.template), o.$wrapper = o.$element.next('div[data-selectsplitter-wrapper-selector]'), o.$firstSelect = e('select[data-selectsplitter-firstselect-selector]', o.$wrapper), o.$secondSelect = e('select[data-selectsplitter-secondselect-selector]', o.$wrapper); let d = Math.max(a, n, 2); d = Math.min(d, 10), o.$firstSelect.attr('size', d), o.$secondSelect.attr('size', d), o.$firstSelect.append(i), o.$firstSelect.on('change', e.proxy(o.updateParentCategory, o)), o.$secondSelect.on('change', e.proxy(o.updateChildCategory, o)), o.$selectedOption = '', o.currentParentCategory = '', o.currentChildCategory = '', o.$element.find('option[selected=selected]').length && (o.$selectedOption = o.$element.find('option[selected=selected]'), o.currentParentCategory = o.$selectedOption.closest('optgroup').attr('label'), o.currentChildCategory = o.$selectedOption.attr('value'), o.$firstSelect.find(`option:contains(${o.currentParentCategory})`).attr('selected', 'selected'), o.$firstSelect.trigger('change')) }, r.prototype.updateParentCategory = function () { const e = this; e.currentParentCategory = e.$firstSelect.val(), e.$secondSelect.empty(); let t = ''; for (const r in e.fullCategoryList[e.currentParentCategory])e.fullCategoryList[e.currentParentCategory].hasOwnProperty(r) && (t = `${t}<option value="${e.fullCategoryList[e.currentParentCategory][r].x}">${e.fullCategoryList[e.currentParentCategory][r].y}</option>`); e.$secondSelect.append(t), e.$selectedOption && e.$secondSelect.find(`option[value="${e.$selectedOption.attr('value')}"]`).attr('selected', 'selected') }, r.prototype.updateChildCategory = function (t) { const r = this; r.currentChildCategory = e(t.target).val(), r.$element.find('option[selected=selected]').removeAttr('selected'), r.$element.find(`option[value="${r.currentChildCategory}"]`).attr('selected', 'selected'), r.$element.trigger('change'), r.$selectedOption = r.$element.find('option[selected=selected]') }, r.prototype.destroy = function () { const e = this; e.$wrapper.remove(), e.$element.removeData(e.type), e.$element.show() }, e.fn.selectsplitter = t, e.fn.selectsplitter.Constructor = r
}(jQuery))
