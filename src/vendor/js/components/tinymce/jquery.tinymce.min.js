!(function () { let f; let c; let u; let p; let d; const s = []; d = typeof global !== 'undefined' ? global : window, p = d.jQuery; const v = function () { return d.tinymce }; p.fn.tinymce = function (o) { let e; let t; let i; const l = this; let r = ''; if (!l.length) return l; if (!o) return v() ? v().get(l[0].id) : null; l.css('visibility', 'hidden'); const n = function () { const a = []; let c = 0; u || (m(), u = !0), l.each((e, t) => { let n; let i = t.id; const r = o.oninit; i || (t.id = i = v().DOM.uniqueId()), v().get(i) || (n = v().createEditor(i, o), a.push(n), n.on('init', () => { let e; let t = r; l.css('visibility', ''), r && ++c == a.length && (typeof t === 'string' && (e = t.indexOf('.') === -1 ? null : v().resolve(t.replace(/\.\w+$/, '')), t = v().resolve(t)), t.apply(e || v(), a)) })) }), p.each(a, (e, t) => { t.render() }) }; if (d.tinymce || c || !(e = o.script_url))c === 1 ? s.push(n) : n(); else { c = 1, t = e.substring(0, e.lastIndexOf('/')), e.indexOf('.min') != -1 && (r = '.min'), d.tinymce = d.tinyMCEPreInit || { base: t, suffix: r }, e.indexOf('gzip') != -1 && (i = o.language || 'en', e = `${e + (/\?/.test(e) ? '&' : '?')}js=true&core=true&suffix=${escape(r)}&themes=${escape(o.theme || 'modern')}&plugins=${escape(o.plugins || '')}&languages=${i || ''}`, d.tinyMCE_GZ || (d.tinyMCE_GZ = { start() { const n = function (e) { v().ScriptLoader.markDone(v().baseURI.toAbsolute(e)) }; n(`langs/${i}.js`), n(`themes/${o.theme}/theme${r}.js`), n(`themes/${o.theme}/langs/${i}.js`), p.each(o.plugins.split(','), (e, t) => { t && (n(`plugins/${t}/plugin${r}.js`), n(`plugins/${t}/langs/${i}.js`)) }) }, end() {} })); const a = document.createElement('script'); a.type = 'text/javascript', a.onload = a.onreadystatechange = function (e) { e = e || window.event, c === 2 || e.type != 'load' && !/complete|loaded/.test(a.readyState) || (v().dom.Event.domLoaded = 1, c = 2, o.script_loaded && o.script_loaded(), n(), p.each(s, (e, t) => { t() })) }, a.src = e, document.body.appendChild(a) } return l }, p.extend(p.expr[':'], { tinymce(e) { let t; return !!(e.id && 'tinymce' in d && (t = v().get(e.id)) && t.editorManager === v()) } }); var m = function () { const r = function (e) { e === 'remove' && this.each((e, t) => { const n = l(t); n && n.remove() }), this.find('span.mceEditor,div.mceEditor').each((e, t) => { const n = v().get(t.id.replace(/_parent$/, '')); n && n.remove() }) }; const o = function (i) { let e; const t = this; if (i != null)r.call(t), t.each((e, t) => { let n; (n = v().get(t.id)) && n.setContent(i) }); else if (t.length > 0 && (e = v().get(t[0].id))) return e.getContent() }; var l = function (e) { let t = null; return e && e.id && d.tinymce && (t = v().get(e.id)), t }; const u = function (e) { return !!(e && e.length && d.tinymce && e.is(':tinymce')) }; const s = {}; p.each(['text', 'html', 'val'], (e, t) => { const a = s[t] = p.fn[t]; const c = t === 'text'; p.fn[t] = function (e) { const t = this; if (!u(t)) return a.apply(t, arguments); if (e !== f) return o.call(t.filter(':tinymce'), e), a.apply(t.not(':tinymce'), arguments), t; let i = ''; const r = arguments; return (c ? t : t.eq(0)).each((e, t) => { const n = l(t); i += n ? c ? n.getContent().replace(/<(?:"[^"]*"|'[^']*'|[^'">])*>/g, '') : n.getContent({ save: !0 }) : a.apply(p(t), r) }), i } }), p.each(['append', 'prepend'], (e, t) => { const n = s[t] = p.fn[t]; const r = t === 'prepend'; p.fn[t] = function (i) { const e = this; return u(e) ? i !== f ? (typeof i === 'string' && e.filter(':tinymce').each((e, t) => { const n = l(t); n && n.setContent(r ? i + n.getContent() : n.getContent() + i) }), n.apply(e.not(':tinymce'), arguments), e) : void 0 : n.apply(e, arguments) } }), p.each(['remove', 'replaceWith', 'replaceAll', 'empty'], (e, t) => { const n = s[t] = p.fn[t]; p.fn[t] = function () { return r.call(this, t), n.apply(this, arguments) } }), s.attr = p.fn.attr, p.fn.attr = function (e, t) { const n = this; const i = arguments; if (!e || e !== 'value' || !u(n)) return s.attr.apply(n, i); if (t !== f) return o.call(n.filter(':tinymce'), t), s.attr.apply(n.not(':tinymce'), i), n; const r = n[0]; const a = l(r); return a ? a.getContent({ save: !0 }) : s.attr.apply(p(r), i) } } }())
