!(function () {
  let n; let t; let e; let r; const o = tinymce.util.Tools.resolve('tinymce.PluginManager'); const v = tinymce.util.Tools.resolve('tinymce.util.Tools'); const O = function (n, t, e) { const r = t === 'UL' ? 'InsertUnorderedList' : 'InsertOrderedList'; n.execCommand(r, !1, !1 === e ? null : { 'list-style-type': e }) }; const u = function (e) { e.addCommand('ApplyUnorderedListStyle', (n, t) => { O(e, 'UL', t['list-style-type']) }), e.addCommand('ApplyOrderedListStyle', (n, t) => { O(e, 'OL', t['list-style-type']) }) }; const i = function (n) { const t = n.getParam('advlist_number_styles', 'default,lower-alpha,lower-greek,lower-roman,upper-alpha,upper-roman'); return t ? t.split(/[ ,]/) : [] }; const l = function (n) { const t = n.getParam('advlist_bullet_styles', 'default,circle,square'); return t ? t.split(/[ ,]/) : [] }; const c = function (n) { return function () { return n } }; const f = c(!1); const s = c(!0); const a = f; const d = s; const g = function () { return p }; var p = (r = { fold(n, t) { return n() }, is: a, isSome: a, isNone: d, getOr: e = function (n) { return n }, getOrThunk: t = function (n) { return n() }, getOrDie(n) { throw new Error(n || 'error: getOrDie called on none.') }, getOrNull() { return null }, getOrUndefined() { return undefined }, or: e, orThunk: t, map: g, ap: g, each() {}, bind: g, flatten: g, exists: a, forall: d, filter: g, equals: n = function (n) { return n.isNone() }, equals_: n, toArray() { return [] }, toString: c('none()') }, Object.freeze && Object.freeze(r), r); var m = function (e) { const n = function () { return e }; const t = function () { return o }; const r = function (n) { return n(e) }; var o = { fold(n, t) { return t(e) }, is(n) { return e === n }, isSome: d, isNone: a, getOr: n, getOrThunk: n, getOrDie: n, getOrNull: n, getOrUndefined: n, or: t, orThunk: t, map(n) { return m(n(e)) }, ap(n) { return n.fold(g, (n) => m(n(e))) }, each(n) { n(e) }, bind: r, flatten: n, exists: r, forall: r, filter(n) { return n(e) ? o : p }, equals(n) { return n.is(e) }, equals_(n, t) { return n.fold(a, (n) => t(e, n)) }, toArray() { return [e] }, toString() { return `some(${e})` } }; return o }; const y = function (n) { return n === null || n === undefined ? p : m(n) }; const h = function (n) { return n && /^(TH|TD)$/.test(n.nodeName) }; const L = function (r) { return function (n) { return n && /^(OL|UL|DL)$/.test(n.nodeName) && (e = n, (t = r).$.contains(t.getBody(), e)); let t, e } }; const b = function (n) { const t = n.dom.getParent(n.selection.getNode(), 'ol,ul'); const e = n.dom.getStyle(t, 'listStyleType'); return y(e) }; const S = function (n, t, e) { const r = (function (n, t) { for (let e = 0; e < n.length; e++) if (t(n[e])) return e; return -1 }(t.parents, h)); const o = r !== -1 ? t.parents.slice(0, r) : t.parents; const u = v.grep(o, L(n)); return u.length > 0 && u[0].nodeName === e }; const T = function (n, t, e, r, o, u) { let i, l, c, f, s, a, d, g, p, m, y; u.length > 0 ? (d = t, g = e, p = r, m = o, y = u, (a = n).ui.registry.addSplitButton(d, { tooltip: g, icon: m === 'OL' ? 'ordered-list' : 'unordered-list', presets: 'toolbar', columns: 3, fetch(n) { n(v.map(y, (n) => { const t = m === 'OL' ? 'num' : 'bull'; const e = n === 'disc' || n === 'decimal' ? 'default' : n; const r = n === 'default' ? '' : n; const o = n.replace(/\-/g, ' ').replace(/\b\w/g, (n) => n.toUpperCase()); return { type: 'choiceitem', value: r, icon: `list-${t}-${e}`, text: o, ariaLabel: o } })) }, onAction() { return a.execCommand(p) }, onItemAction(n, t) { O(a, m, t) }, select(t) { return b(a).map((n) => t === n).getOr(!1) }, onSetup(t) { const n = function (n) { t.setActive(S(a, n, m)) }; return a.on('nodeChange', n), function () { return a.off('nodeChange', n) } } })) : (l = t, c = e, f = r, s = o, (i = n).ui.registry.addToggleButton(l, { active: !1, tooltip: c, icon: s === 'OL' ? 'ordered-list' : 'unordered-list', onSetup(t) { const n = function (n) { t.setActive(S(i, n, s)) }; return i.on('nodeChange', n), function () { return i.off('nodeChange', n) } }, onAction() { return i.execCommand(f) } })) }; const A = function (n) { T(n, 'numlist', 'Numbered list', 'InsertOrderedList', 'OL', i(n)), T(n, 'bullist', 'Bullet list', 'InsertUnorderedList', 'UL', l(n)) }; o.add('advlist', (n) => { let t, e, r; e = 'lists', r = (t = n).settings.plugins ? t.settings.plugins : '', v.inArray(r.split(/[ ,]/), e) !== -1 && (A(n), u(n)) }), function C() {}
}())
