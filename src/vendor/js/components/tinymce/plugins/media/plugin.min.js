!(function () {
  let t; let a; let e; let r; let n; let i; const o = tinymce.util.Tools.resolve('tinymce.PluginManager'); const c = (t = 'function', function (e) { return (function (e) { if (e === null) return 'null'; const t = typeof e; return t === 'object' && Array.prototype.isPrototypeOf(e) ? 'array' : t === 'object' && String.prototype.isPrototypeOf(e) ? 'string' : t }(e)) === t }); const u = Object.prototype.hasOwnProperty; const v = (a = function (e, t) { return t }, function () { for (var e = new Array(arguments.length), t = 0; t < e.length; t++)e[t] = arguments[t]; if (e.length === 0) throw new Error("Can't merge zero objects"); for (var r = {}, n = 0; n < e.length; n++) { const i = e[n]; for (const o in i)u.call(i, o) && (r[o] = a(r[o], i[o])) } return r }); const s = function (e) { return function () { return e } }; const l = s(!1); const m = s(!0); const d = l; const h = m; const f = function () { return p }; var p = (i = { fold(e, t) { return e() }, is: d, isSome: d, isNone: h, getOr: n = function (e) { return e }, getOrThunk: r = function (e) { return e() }, getOrDie(e) { throw new Error(e || 'error: getOrDie called on none.') }, getOrNull() { return null }, getOrUndefined() { return undefined }, or: n, orThunk: r, map: f, ap: f, each() {}, bind: f, flatten: f, exists: d, forall: h, filter: f, equals: e = function (e) { return e.isNone() }, equals_: e, toArray() { return [] }, toString: s('none()') }, Object.freeze && Object.freeze(i), i); var g = function (r) { const e = function () { return r }; const t = function () { return i }; const n = function (e) { return e(r) }; var i = { fold(e, t) { return t(r) }, is(e) { return r === e }, isSome: h, isNone: d, getOr: e, getOrThunk: e, getOrDie: e, getOrNull: e, getOrUndefined: e, or: t, orThunk: t, map(e) { return g(e(r)) }, ap(e) { return e.fold(f, (e) => g(e(r))) }, each(e) { e(r) }, bind: n, flatten: e, exists: n, forall: n, filter(e) { return e(r) ? i : p }, equals(e) { return e.is(r) }, equals_(e, t) { return e.fold(d, (e) => t(r, e)) }, toArray() { return [r] }, toString() { return `some(${r})` } }; return i }; const w = { some: g, none: f, from(e) { return e === null || e === undefined ? p : g(e) } }; const b = Object.hasOwnProperty; const y = function (e, t) { return x(e, t) ? w.some(e[t]) : w.none() }; var x = function (e, t) { return b.call(e, t) }; const j = Array.prototype.push; const O = (Array.prototype.slice, c(Array.from) && Array.from, tinymce.util.Tools.resolve('tinymce.util.Tools')); const A = function (e) { return e.getParam('media_scripts') }; const _ = function (e) { return e.getParam('audio_template_callback') }; const C = function (e) { return e.getParam('video_template_callback') }; const M = function (e) { return e.getParam('media_live_embeds', !0) }; const F = function (e) { return e.getParam('media_filter_html', !0) }; const P = function (e) { return e.getParam('media_url_resolver') }; const S = function (e) { return e.getParam('media_alt_source', !0) }; const k = function (e) { return e.getParam('media_poster', !0) }; const T = function (e) { return e.getParam('media_dimensions', !0) }; const $ = tinymce.util.Tools.resolve('tinymce.html.SaxParser'); const z = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils'); const D = function (e, t) { if (e) for (let r = 0; r < e.length; r++) if (t.indexOf(e[r].filter) !== -1) return e[r] }; const N = function (t) { return function (e) { return e ? e.style[t].replace(/px$/, '') : '' } }; const E = function (n) { return function (e, t) { let r; e && (e.style[n] = /^[0-9.]+$/.test(r = t) ? `${r}px` : r) } }; const U = { getMaxWidth: N('maxWidth'), getMaxHeight: N('maxHeight'), setMaxWidth: E('maxWidth'), setMaxHeight: E('maxHeight') }; const R = z.DOM; const W = function (e) { return R.getAttrib(e, 'data-ephox-embed-iri') }; const H = function (e, t) { return c = t, u = R.createFragment(c), W(u.firstChild) !== '' ? (o = t, a = R.createFragment(o).firstChild, { type: 'ephox-embed-iri', source1: W(a), source2: '', poster: '', width: U.getMaxWidth(a), height: U.getMaxHeight(a) }) : (n = e, r = t, $({ validate: (i = {}, !1), allow_conditional_comments: !0, special: 'script,noscript', start(e, t) { if (i.source1 || e !== 'param' || (i.source1 = t.map.movie), e !== 'iframe' && e !== 'object' && e !== 'embed' && e !== 'video' && e !== 'audio' || (i.type || (i.type = e), i = O.extend(t.map, i)), e === 'script') { const r = D(n, t.map.src); if (!r) return; i = { type: 'script', source1: t.map.src, width: r.width, height: r.height } }e === 'source' && (i.source1 ? i.source2 || (i.source2 = t.map.src) : i.source1 = t.map.src), e !== 'img' || i.poster || (i.poster = t.map.src) } }).parse(r), i.source1 = i.source1 || i.src || i.data, i.source2 = i.source2 || '', i.poster = i.poster || '', i); let n, r, i, o, a, c, u }; const L = tinymce.util.Tools.resolve('tinymce.util.Promise'); const I = function (e) { const t = { mp3: 'audio/mpeg', wav: 'audio/wav', mp4: 'video/mp4', webm: 'video/webm', ogg: 'video/ogg', swf: 'application/x-shockwave-flash' }[e.toLowerCase().split('.').pop()]; return t || '' }; const q = tinymce.util.Tools.resolve('tinymce.html.Writer'); const B = tinymce.util.Tools.resolve('tinymce.html.Schema'); const G = z.DOM; const J = function (e, t) { let r, n, i, o; for (r in t) if (i = `${t[r]}`, e.map[r]) for (n = e.length; n--;)(o = e[n]).name === r && (i ? (e.map[r] = i, o.value = i) : (delete e.map[r], e.splice(n, 1))); else i && (e.push({ name: r, value: i }), e.map[r] = i) }; const K = function (e, t) { let r; let n; const i = G.createFragment(e).firstChild; return U.setMaxWidth(i, t.width), U.setMaxHeight(i, t.height), r = i.outerHTML, n = q(), $(n).parse(r), n.getContent() }; const Q = function (e, t, r) { return s = e, l = G.createFragment(s), G.getAttrib(l.firstChild, 'data-ephox-embed-iri') !== '' ? K(e, t) : (n = e, i = t, o = r, c = q(), $({ validate: !1, allow_conditional_comments: !(u = 0), special: 'script,noscript', comment(e) { c.comment(e) }, cdata(e) { c.cdata(e) }, text(e, t) { c.text(e, t) }, start(e, t, r) { switch (e) { case 'video':case 'object':case 'embed':case 'img':case 'iframe':i.height !== undefined && i.width !== undefined && J(t, { width: i.width, height: i.height }) } if (o) switch (e) { case 'video':J(t, { poster: i.poster, src: '' }), i.source2 && J(t, { src: '' }); break; case 'iframe':J(t, { src: i.source1 }); break; case 'source':if (++u <= 2 && (J(t, { src: i[`source${u}`], type: i[`source${u}mime`] }), !i[`source${u}`])) return; break; case 'img':if (!i.poster) return; a = !0 }c.start(e, t, r) }, end(e) { if (e === 'video' && o) for (let t = 1; t <= 2; t++) if (i[`source${t}`]) { const r = []; r.map = {}, u < t && (J(r, { src: i[`source${t}`], type: i[`source${t}mime`] }), c.start('source', r, !0)) } if (i.poster && e === 'object' && o && !a) { const n = []; n.map = {}, J(n, { src: i.poster, width: i.width, height: i.height }), c.start('img', n, !0) }c.end(e) } }, B({})).parse(n), c.getContent()); let n, i, o, a, c, u, s, l }; const V = [{ regex: /youtu\.be\/([\w\-_\?&=.]+)/i, type: 'iframe', w: 560, h: 314, url: '//www.youtube.com/embed/$1', allowFullscreen: !0 }, { regex: /youtube\.com(.+)v=([^&]+)(&([a-z0-9&=\-_]+))?/i, type: 'iframe', w: 560, h: 314, url: '//www.youtube.com/embed/$2?$4', allowFullscreen: !0 }, { regex: /youtube.com\/embed\/([a-z0-9\?&=\-_]+)/i, type: 'iframe', w: 560, h: 314, url: '//www.youtube.com/embed/$1', allowFullscreen: !0 }, { regex: /vimeo\.com\/([0-9]+)/, type: 'iframe', w: 425, h: 350, url: '//player.vimeo.com/video/$1?title=0&byline=0&portrait=0&color=8dc7dc', allowFullscreen: !0 }, { regex: /vimeo\.com\/(.*)\/([0-9]+)/, type: 'iframe', w: 425, h: 350, url: '//player.vimeo.com/video/$2?title=0&amp;byline=0', allowFullscreen: !0 }, { regex: /maps\.google\.([a-z]{2,3})\/maps\/(.+)msid=(.+)/, type: 'iframe', w: 425, h: 350, url: '//maps.google.com/maps/ms?msid=$2&output=embed"', allowFullscreen: !1 }, { regex: /dailymotion\.com\/video\/([^_]+)/, type: 'iframe', w: 480, h: 270, url: '//www.dailymotion.com/embed/video/$1', allowFullscreen: !0 }, { regex: /dai\.ly\/([^_]+)/, type: 'iframe', w: 480, h: 270, url: '//www.dailymotion.com/embed/video/$1', allowFullscreen: !0 }]; const X = function (r, e) { const n = O.extend({}, e); if (!n.source1 && (O.extend(n, H(A(r), n.embed)), !n.source1)) return ''; n.source2 || (n.source2 = ''), n.poster || (n.poster = ''), n.source1 = r.convertURL(n.source1, 'source'), n.source2 = r.convertURL(n.source2, 'source'), n.source1mime = I(n.source1), n.source2mime = I(n.source2), n.poster = r.convertURL(n.poster, 'poster'); let t; let i; const o = (t = n.source1, (i = V.filter((e) => e.regex.test(t))).length > 0 ? O.extend({}, i[0], { url: (function (e, t) { for (var r = e.regex.exec(t), n = e.url, i = function (e) { n = n.replace(`$${e}`, () => r[e] ? r[e] : '') }, o = 0; o < r.length; o++)i(o); return n.replace(/\?$/, '') }(i[0], t)) }) : null); if (o && (n.source1 = o.url, n.type = o.type, n.allowFullscreen = o.allowFullscreen, n.width = n.width || o.w, n.height = n.height || o.h), n.embed) return Q(n.embed, n, !0); const a = D(A(r), n.source1); a && (n.type = 'script', n.width = a.width, n.height = a.height); let c; let u; let s; let l; let m; let d; let h; let f; const p = _(r); const g = C(r); return n.width = n.width || 300, n.height = n.height || 150, O.each(n, (e, t) => { n[t] = r.dom.encode(e) }), n.type === 'iframe' ? (f = (h = n).allowFullscreen ? ' allowFullscreen="1"' : '', `<iframe src="${h.source1}" width="${h.width}" height="${h.height}"${f}></iframe>`) : n.source1mime === 'application/x-shockwave-flash' ? (d = `<object data="${(m = n).source1}" width="${m.width}" height="${m.height}" type="application/x-shockwave-flash">`, m.poster && (d += `<img src="${m.poster}" width="${m.width}" height="${m.height}" />`), d += '</object>') : n.source1mime.indexOf('audio') !== -1 ? (s = n, (l = p) ? l(s) : `<audio controls="controls" src="${s.source1}">${s.source2 ? `\n<source src="${s.source2}"${s.source2mime ? ` type="${s.source2mime}"` : ''} />\n` : ''}</audio>`) : n.type === 'script' ? `<script src="${n.source1}"><\/script>` : (c = n, (u = g) ? u(c) : `<video width="${c.width}" height="${c.height}"${c.poster ? ` poster="${c.poster}"` : ''} controls="controls">\n<source src="${c.source1}"${c.source1mime ? ` type="${c.source1mime}"` : ''} />\n${c.source2 ? `<source src="${c.source2}"${c.source2mime ? ` type="${c.source2mime}"` : ''} />\n` : ''}</video>`) }; const Y = {}; const Z = function (t) { return function (e) { return X(t, e) } }; const ee = function (e, t) { let r; let n; let i; let o; let a; const c = P(e); return c ? (i = t, o = Z(e), a = c, new L((t, e) => { const r = function (e) { return e.html && (Y[i.source1] = e), t({ url: i.source1, html: e.html ? e.html : o(i) }) }; Y[i.source1] ? r(Y[i.source1]) : a({ url: i.source1 }, r, e) })) : (r = t, n = Z(e), new L((e) => { e({ html: n(r), url: r.source1 }) })) }; const te = function (e) { return Y.hasOwnProperty(e) }; const re = function (e) { return v(e, { source1: e.source1.value, source2: e.source2.value, poster: e.poster.value }) }; const ne = function (e) { return v(e, { source1: { value: y(e, 'source1').getOr('') }, source2: { value: y(e, 'source2').getOr('') }, poster: { value: y(e, 'poster').getOr('') } }) }; const ie = function (r) { return function (e) { const t = e && e.msg ? `Media embed handler error: ${e.msg}` : 'Media embed handler threw unknown error.'; r.notificationManager.open({ type: 'error', text: t }) } }; const oe = function (e, t) { return O.extend({}, H(A(e), t)) }; const ae = function (e, t) { const r = e.dom.select('img[data-mce-object]'); e.insertContent(t), (function (e, t) { let r; let n; const i = e.dom.select('img[data-mce-object]'); for (r = 0; r < t.length; r++) for (n = i.length - 1; n >= 0; n--)t[r] === i[n] && i.splice(n, 1); e.selection.select(i[0]) }(e, r)), e.nodeChanged() }; const ce = function (a) { let e; let t; let r; let n; let i; const o = (t = (e = a).selection.getNode(), (r = t.getAttribute('data-ephox-embed-iri')) ? { source1: r, width: U.getMaxWidth(t), height: U.getMaxHeight(t) } : t.getAttribute('data-mce-object') ? H(A(e), e.serializer.serialize(t, { selection: !0 })) : {}); const c = { source1: '', source2: '', embed: (n = a, i = n.selection.getNode(), i.getAttribute('data-mce-object') || i.getAttribute('data-ephox-embed-iri') ? n.selection.getContent() : ''), poster: '', dimensions: { height: o.height ? o.height : '', width: o.width ? o.width : '' } }; const u = ne(v(c, o)); const s = function (e) { const t = re(e.getData()); return T(a) ? v(t, { width: t.dimensions.width, height: t.dimensions.height }) : t }; const l = function (e) { let i; let o; const t = s(e); ee(a, t).then((i = w, o = a, function (e) { const t = e.html; const r = oe(o, t); const n = { source1: e.url, embed: t, dimensions: { width: r.width ? r.width : '', height: r.height ? r.height : '' } }; i.setData(ne(n)) })).catch(ie(a)) }; const m = { title: 'General', items: (function (e) { for (var t = [], r = 0, n = e.length; r < n; ++r) { if (!Array.prototype.isPrototypeOf(e[r])) throw new Error(`Arr.flatten item ${r} was not an array, input: ${e}`); j.apply(t, e[r]) } return t }([[{ name: 'source1', type: 'urlinput', filetype: 'media', label: 'Source' }], T(a) ? [{ type: 'sizeinput', name: 'dimensions', label: 'Constrain proportions', constrain: !0 }] : []])) }; const d = { title: 'Embed', items: [{ type: 'textarea', name: 'embed', label: 'Paste your embed code below:' }] }; const h = []; S(a) && h.push({ name: 'source2', type: 'urlinput', filetype: 'media', label: 'Alternative image URL' }), k(a) && h.push({ name: 'poster', type: 'urlinput', filetype: 'image', label: 'Media poster (Image URL)' }); const f = { title: 'Advanced', items: h }; const p = [m, d]; h.length > 0 && p.push(f); const g = { type: 'tabpanel', tabs: p }; var w = a.windowManager.open({ title: 'Insert/Edit Media', size: 'normal', body: g, buttons: [{ type: 'cancel', name: 'cancel', text: 'Cancel' }, { type: 'submit', name: 'save', text: 'Save', primary: !0 }], onSubmit(e) { let t; let r; const n = s(e); r = a, (t = n).embed = Q(t.embed, t), t.embed && te(t.source1) ? ae(r, t.embed) : ee(r, t).then((e) => { ae(r, e.html) }).catch(ie(r)), e.close() }, onChange(e, t) { switch (t.name) { case 'source1':l(e); break; case 'dimensions':l(e); case 'embed':n = re((r = e).getData()), (i = oe(a, n.embed)).dimensions = { width: i.width ? i.width : n.dimensions.width, height: i.height ? i.height : n.dimensions.height }, r.setData(ne(i)) } let r, n, i }, initialData: u }) }; const ue = function (e) { return { showDialog() { ce(e) } } }; const se = function (e) { e.addCommand('mceMedia', () => { ce(e) }) }; const le = tinymce.util.Tools.resolve('tinymce.html.Node'); const me = tinymce.util.Tools.resolve('tinymce.Env'); const de = function (i, e) { if (!1 === F(i)) return e; let o; const a = q(); return $({ validate: !1, allow_conditional_comments: !1, special: 'script,noscript', comment(e) { a.comment(e) }, cdata(e) { a.cdata(e) }, text(e, t) { a.text(e, t) }, start(e, t, r) { if (o = !0, e !== 'script' && e !== 'noscript') { for (let n = 0; n < t.length; n++) { if (t[n].name.indexOf('on') === 0) return; t[n].name === 'style' && (t[n].value = i.dom.serializeStyle(i.dom.parseStyle(t[n].value), e)) }a.start(e, t, r), o = !1 } }, end(e) { o || a.end(e) } }, B({})).parse(e), a.getContent() }; const he = function (e, t) { let r; const n = t.name; return (r = new le('img', 1)).shortEnded = !0, pe(e, t, r), r.attr({ width: t.attr('width') || '300', height: t.attr('height') || (n === 'audio' ? '30' : '150'), style: t.attr('style'), src: me.transparentSrc, 'data-mce-object': n, class: `mce-object mce-object-${n}` }), r }; const fe = function (e, t) { let r; let n; let i; const o = t.name; return (r = new le('span', 1)).attr({ contentEditable: 'false', style: t.attr('style'), 'data-mce-object': o, class: `mce-preview-object mce-object-${o}` }), pe(e, t, r), (n = new le(o, 1)).attr({ src: t.attr('src'), allowfullscreen: t.attr('allowfullscreen'), style: t.attr('style'), class: t.attr('class'), width: t.attr('width'), height: t.attr('height'), frameborder: '0' }), (i = new le('span', 1)).attr('class', 'mce-shim'), r.append(n), r.append(i), r }; var pe = function (e, t, r) { let n, i, o, a, c; for (a = (o = t.attributes).length; a--;)n = o[a].name, i = o[a].value, n !== 'width' && n !== 'height' && n !== 'style' && (n !== 'data' && n !== 'src' || (i = e.convertURL(i, n)), r.attr(`data-mce-p-${n}`, i)); (c = t.firstChild && t.firstChild.value) && (r.attr('data-mce-html', escape(de(e, c))), r.firstChild = null) }; const ge = function (e) { for (;e = e.parent;) if (e.attr('data-ephox-embed-iri') || (t = e.attr('class')) && /\btiny-pageembed\b/.test(t)) return !0; let t; return !1 }; const we = function (i) { return function (e) { for (var t, r, n = e.length; n--;)(t = e[n]).parent && (t.parent.attr('data-mce-object') || (t.name !== 'script' || (r = D(A(i), t.attr('src')))) && (r && (r.width && t.attr('width', r.width.toString()), r.height && t.attr('height', r.height.toString())), t.name === 'iframe' && M(i) && me.ceFalse ? ge(t) || t.replace(fe(i, t)) : ge(t) || t.replace(he(i, t)))) } }; const ve = function (d) { d.on('preInit', () => { const t = d.schema.getSpecialElements(); O.each('video audio iframe object'.split(' '), (e) => { t[e] = new RegExp(`</${e}[^>]*>`, 'gi') }); const r = d.schema.getBoolAttrs(); O.each('webkitallowfullscreen mozallowfullscreen allowfullscreen'.split(' '), (e) => { r[e] = {} }), d.parser.addNodeFilter('iframe,video,audio,object,embed,script', we(d)), d.serializer.addAttributeFilter('data-mce-object', (e, t) => { for (var r, n, i, o, a, c, u, s, l = e.length; l--;) if ((r = e[l]).parent) { for (u = r.attr(t), n = new le(u, 1), u !== 'audio' && u !== 'script' && ((s = r.attr('class')) && s.indexOf('mce-preview-object') !== -1 ? n.attr({ width: r.firstChild.attr('width'), height: r.firstChild.attr('height') }) : n.attr({ width: r.attr('width'), height: r.attr('height') })), n.attr({ style: r.attr('style') }), i = (o = r.attributes).length; i--;) { const m = o[i].name; m.indexOf('data-mce-p-') === 0 && n.attr(m.substr(11), o[i].value) }u === 'script' && n.attr('type', 'text/javascript'), (a = r.attr('data-mce-html')) && ((c = new le('#text', 3)).raw = !0, c.value = de(d, unescape(a)), n.append(c)), r.replace(n) } }) }), d.on('setContent', () => { d.$('span.mce-preview-object').each((e, t) => { const r = d.$(t); r.find('span.mce-shim', t).length === 0 && r.append('<span class="mce-shim"></span>') }) }) }; const be = function (e) { e.on('ResolveName', (e) => { let t; e.target.nodeType === 1 && (t = e.target.getAttribute('data-mce-object')) && (e.name = t) }) }; const ye = function (t) { t.on('click keyup', () => { const e = t.selection.getNode(); e && t.dom.hasClass(e, 'mce-preview-object') && t.dom.getAttrib(e, 'data-mce-selected') && e.setAttribute('data-mce-selected', '2') }), t.on('ObjectSelected', (e) => { const t = e.target.getAttribute('data-mce-object'); t !== 'audio' && t !== 'script' || e.preventDefault() }), t.on('objectResized', (e) => { let t; const r = e.target; r.getAttribute('data-mce-object') && (t = r.getAttribute('data-mce-html')) && (t = unescape(t), r.setAttribute('data-mce-html', escape(Q(t, { width: e.width, height: e.height })))) }) }; const xe = function (e) { let t, r; e.ui.registry.addToggleButton('media', { tooltip: 'Insert/edit media', icon: 'embed', onAction() { e.execCommand('mceMedia') }, onSetup: (t = e, r = ['img[data-mce-object]', 'span[data-mce-object]', 'div[data-ephox-embed-iri]'], function (e) { return t.selection.selectorChangedWithUnbind(r.join(','), e.setActive).unbind }) }), e.ui.registry.addMenuItem('media', { icon: 'embed', text: 'Media...', onAction() { e.execCommand('mceMedia') } }) }; o.add('media', (e) => se(e), xe(e), be(e), ve(e), ye(e), ue(e)), function je() {}
}())
