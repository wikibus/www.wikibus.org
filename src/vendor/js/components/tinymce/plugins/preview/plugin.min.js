!(function () {
  const e = tinymce.util.Tools.resolve('tinymce.PluginManager'); const c = tinymce.util.Tools.resolve('tinymce.util.Tools'); const s = function (e) { return e.getParam('content_style', '') }; const i = function (t) { let n = ''; const i = t.dom.encode; const e = s(t); n += `<base href="${i(t.documentBaseURI.getURI())}">`, e && (n += `<style type="text/css">${e}</style>`), c.each(t.contentCSS, (e) => { n += `<link type="text/css" rel="stylesheet" href="${i(t.documentBaseURI.toAbsolute(e))}">` }); let o = t.settings.body_id || 'tinymce'; o.indexOf('=') !== -1 && (o = (o = t.getParam('body_id', '', 'hash'))[t.id] || o); let r = t.settings.body_class || ''; r.indexOf('=') !== -1 && (r = (r = t.getParam('body_class', '', 'hash'))[t.id] || ''); const a = t.settings.directionality ? ` dir="${t.settings.directionality}"` : ''; return `<!DOCTYPE html><html><head>${n}</head><body id="${i(o)}" class="mce-content-body ${i(r)}"${i(a)}>${t.getContent()}<script>document.addEventListener && document.addEventListener("click", function(e) {for (var elm = e.target; elm; elm = elm.parentNode) {if (elm.nodeName === "A") {e.preventDefault();}}}, false);<\/script> </body></html>` }; const t = function (n) { n.addCommand('mcePreview', () => { let e, t; t = i(e = n), e.windowManager.open({ title: 'Preview', size: 'large', body: { type: 'panel', items: [{ name: 'preview', type: 'iframe', sandboxed: !0, flex: !0 }] }, buttons: [{ type: 'cancel', name: 'close', text: 'Close', primary: !0 }], initialData: { preview: t } }).focus('close') }) }; const n = function (e) { e.ui.registry.addButton('preview', { icon: 'preview', tooltip: 'Preview', onAction() { return e.execCommand('mcePreview') } }), e.ui.registry.addMenuItem('preview', { icon: 'preview', text: 'Preview', onAction() { return e.execCommand('mcePreview') } }) }; e.add('preview', (e) => { t(e), n(e) }), function o() {}
}())
