!(function () {
  const n = tinymce.util.Tools.resolve('tinymce.PluginManager'); const t = function (n, e) { let o; const t = (o = n).plugins.visualchars && o.plugins.visualchars.isEnabled() ? '<span class="mce-nbsp">&nbsp;</span>' : '&nbsp;'; n.insertContent(function (n, e) { for (var o = '', t = 0; t < e; t++)o += n; return o }(t, e)), n.dom.setAttrib(n.dom.select('span.mce-nbsp'), 'data-mce-bogus', '1') }; const e = function (n) { n.addCommand('mceNonBreaking', () => { t(n, 1) }) }; const i = tinymce.util.Tools.resolve('tinymce.util.VK'); const a = function (n) { const e = n.getParam('nonbreaking_force_tab', 0); return typeof e === 'boolean' ? !0 === e ? 3 : 0 : e }; const o = function (e) { const o = a(e); o > 0 && e.on('keydown', (n) => { if (n.keyCode === i.TAB && !n.isDefaultPrevented()) { if (n.shiftKey) return; n.preventDefault(), n.stopImmediatePropagation(), t(e, o) } }) }; const r = function (n) { n.ui.registry.addButton('nonbreaking', { icon: 'non-breaking', tooltip: 'Nonbreaking space', onAction() { return n.execCommand('mceNonBreaking') } }), n.ui.registry.addMenuItem('nonbreaking', { icon: 'non-breaking', text: 'Nonbreaking space', onAction() { return n.execCommand('mceNonBreaking') } }) }; n.add('nonbreaking', (n) => { e(n), r(n), o(n) }), function c() {}
}())
