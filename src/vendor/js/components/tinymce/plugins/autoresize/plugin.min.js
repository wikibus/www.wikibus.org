!(function () {
  var i = function (e) { let t = e; const n = function () { return t }; return { get: n, set(e) { t = e }, clone() { return i(n()) } } }; const e = tinymce.util.Tools.resolve('tinymce.PluginManager'); const m = tinymce.util.Tools.resolve('tinymce.Env'); const r = tinymce.util.Tools.resolve('tinymce.util.Delay'); const d = function (e) { return e.getParam('min_height', e.getElement().offsetHeight, 'number') }; const h = function (e) { return e.getParam('max_height', 0, 'number') }; const o = function (e) { return e.getParam('autoresize_overflow_padding', 1, 'number') }; const u = function (e) { return e.getParam('autoresize_bottom_margin', 50, 'number') }; const a = function (e) { return e.getParam('autoresize_on_init', !0, 'boolean') }; var s = function (e, t, n, i, o) { r.setEditorTimeout(e, () => { p(e, t), n-- ? s(e, t, n, i, o) : o && o() }, i) }; const v = function (e, t) { const n = e.getBody(); n && (n.style.overflowY = t ? '' : 'hidden', t || (n.scrollTop = 0)) }; const y = function (e, t, n, i) { const o = parseInt(e.getStyle(t, `margin-${n}`, i), 10); return isNaN(o) ? 0 : o }; var p = function (e, t) { let n; let i; let o; const r = e.dom; const u = e.getDoc(); if (u) if ((a = e).plugins.fullscreen && a.plugins.fullscreen.isFullscreen())v(e, !0); else { var a; const s = u.body; i = d(e); const c = y(r, s, 'top', !0); const g = y(r, s, 'bottom', !0); (o = s.offsetHeight + c + g) < 0 && (o = 0); const l = e.getContainer().scrollHeight - e.getContentAreaContainer().scrollHeight; o + l > d(e) && (i = o + l); const f = h(e); f && f < i ? (i = f, v(e, !0)) : v(e, !1), i !== t.get() && (n = i - t.get(), r.setStyle(e.getContainer(), 'height', `${i}px`), t.set(i), m.webkit && n < 0 && p(e, t)) } }; const n = { setup(n, t) { n.on('init', () => { const e = o(n); const t = u(n); n.dom.setStyles(n.getBody(), { paddingLeft: e, paddingRight: e, paddingBottom: t, 'min-height': 0 }) }), n.on('nodechange setcontent keyup FullscreenStateChanged', (e) => { p(n, t) }), a(n) && n.on('init', () => { s(n, t, 20, 100, () => { s(n, t, 5, 1e3) }) }) }, resize: p }; const c = function (e, t) { e.addCommand('mceAutoResize', () => { n.resize(e, t) }) }; e.add('autoresize', (e) => { if (e.settings.hasOwnProperty('resize') || (e.settings.resize = !1), !e.inline) { const t = i(0); c(e, t), n.setup(e, t) } }), function t() {}
}())
