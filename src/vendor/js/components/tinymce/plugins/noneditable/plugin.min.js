!(function () {
  const t = tinymce.util.Tools.resolve('tinymce.PluginManager'); const c = tinymce.util.Tools.resolve('tinymce.util.Tools'); const l = function (t) { return t.getParam('noneditable_noneditable_class', 'mceNonEditable') }; const u = function (t) { return t.getParam('noneditable_editable_class', 'mceEditable') }; const f = function (t) { const n = t.getParam('noneditable_regexp', []); return n && n.constructor === RegExp ? [n] : n }; const s = function (n) { return function (t) { return (` ${t.attr('class')} `).indexOf(n) !== -1 } }; const d = function (i, o, c) { return function (t) { const n = arguments; const e = n[n.length - 2]; const r = e > 0 ? o.charAt(e - 1) : ''; if (r === '"') return t; if (r === '>') { const a = o.lastIndexOf('<', e); if (a !== -1 && o.substring(a, e).indexOf('contenteditable="false"') !== -1) return t } return `<span class="${c}" data-mce-content="${i.dom.encode(n[0])}">${i.dom.encode(typeof n[1] === 'string' ? n[1] : n[0])}</span>` } }; const n = function (n) { let t; let e; const r = 'contenteditable'; t = ` ${c.trim(u(n))} `, e = ` ${c.trim(l(n))} `; const a = s(t); const i = s(e); const o = f(n); n.on('PreInit', () => { o.length > 0 && n.on('BeforeSetContent', (t) => { !(function (t, n, e) { let r = n.length; let a = e.content; if (e.format !== 'raw') { for (;r--;)a = a.replace(n[r], d(t, a, l(t))); e.content = a } }(n, o, t)) }), n.parser.addAttributeFilter('class', (t) => { for (var n, e = t.length; e--;)n = t[e], a(n) ? n.attr(r, 'true') : i(n) && n.attr(r, 'false') }), n.serializer.addAttributeFilter(r, (t) => { for (var n, e = t.length; e--;)n = t[e], (a(n) || i(n)) && (o.length > 0 && n.attr('data-mce-content') ? (n.name = '#text', n.type = 3, n.raw = !0, n.value = n.attr('data-mce-content')) : n.attr(r, null)) }) }) }; t.add('noneditable', (t) => { n(t) }), function e() {}
}())
