!(function () {
  var i = function (e) { let n = e; const t = function () { return n }; return { get: t, set(e) { n = e }, clone() { return i(t()) } } }; const e = tinymce.util.Tools.resolve('tinymce.PluginManager'); const t = function (e) { return { isFullscreen() { return e.get() !== null } } }; const n = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils'); const g = function (e, n) { e.fire('FullscreenStateChanged', { state: n }) }; const m = n.DOM; const r = function (e, n) { let t; let r; let o; let i; let l; let c; const u = document.body; const s = document.documentElement; const d = n.get(); const a = function () { let e, n, t, i; m.setStyle(o, 'height', (t = window, i = document.body, i.offsetWidth && (e = i.offsetWidth, n = i.offsetHeight), t.innerWidth && t.innerHeight && (e = t.innerWidth, n = t.innerHeight), { w: e, h: n }).h - (r.clientHeight - o.clientHeight)) }; const f = function () { m.unbind(window, 'resize', a) }; if (t = (r = e.getContainer()).style, i = (o = e.getContentAreaContainer().firstChild).style, d)i.width = d.iframeWidth, i.height = d.iframeHeight, d.containerWidth && (t.width = d.containerWidth), d.containerHeight && (t.height = d.containerHeight), m.removeClass(u, 'tox-fullscreen'), m.removeClass(s, 'tox-fullscreen'), m.removeClass(r, 'tox-fullscreen'), l = d.scrollPos, window.scrollTo(l.x, l.y), m.unbind(window, 'resize', d.resizeHandler), e.off('remove', d.removeHandler), n.set(null), g(e, !1); else { const h = { scrollPos: (c = m.getViewPort(), { x: c.x, y: c.y }), containerWidth: t.width, containerHeight: t.height, iframeWidth: i.width, iframeHeight: i.height, resizeHandler: a, removeHandler: f }; i.width = i.height = '100%', t.width = t.height = '', m.addClass(u, 'tox-fullscreen'), m.addClass(s, 'tox-fullscreen'), m.addClass(r, 'tox-fullscreen'), m.bind(window, 'resize', a), e.on('remove', f), a(), n.set(h), g(e, !0) } }; const o = function (e, n) { e.addCommand('mceFullScreen', () => { r(e, n) }) }; const l = function (t, i) { return function (n) { n.setActive(i.get() !== null); const e = function (e) { return n.setActive(e.state) }; return t.on('FullscreenStateChanged', e), function () { return t.off('FullscreenStateChanged', e) } } }; const c = function (e, n) { e.ui.registry.addToggleMenuItem('fullscreen', { text: 'Fullscreen', shortcut: 'Meta+Shift+F', onAction() { return e.execCommand('mceFullScreen') }, onSetup: l(e, n) }), e.ui.registry.addToggleButton('fullscreen', { tooltip: 'Fullscreen', icon: 'fullscreen', onAction() { return e.execCommand('mceFullScreen') }, onSetup: l(e, n) }) }; e.add('fullscreen', (e) => { const n = i(null); return e.settings.inline || (o(e, n), c(e, n), e.addShortcut('Meta+Shift+F', '', 'mceFullScreen')), t(n) }), function u() {}
}())
