!(function () {
  const e = tinymce.util.Tools.resolve('tinymce.PluginManager'); const n = function (e) { return e.getParam('insertdatetime_timeformat', e.translate('%H:%M:%S')) }; const r = function (e) { return e.getParam('insertdatetime_formats', ['%H:%M:%S', '%Y-%m-%d', '%I:%M:%S %p', '%D']) }; const t = function (e) { return e.getParam('insertdatetime_dateformat', e.translate('%Y-%m-%d')) }; const a = n; const i = r; const o = function (e) { const t = r(e); return t.length > 0 ? t[0] : n(e) }; const l = function (e) { return e.getParam('insertdatetime_element', !1) }; const u = 'Sun Mon Tue Wed Thu Fri Sat Sun'.split(' '); const c = 'Sunday Monday Tuesday Wednesday Thursday Friday Saturday Sunday'.split(' '); const m = 'Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec'.split(' '); const s = 'January February March April May June July August September October November December'.split(' '); const d = function (e, t) { if ((e = `${e}`).length < t) for (let n = 0; n < t - e.length; n++)e = `0${e}`; return e }; const p = function (e, t, n) { return n = n || new Date(), t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = t.replace('%D', '%m/%d/%Y')).replace('%r', '%I:%M:%S %p')).replace('%Y', `${n.getFullYear()}`)).replace('%y', `${n.getYear()}`)).replace('%m', d(n.getMonth() + 1, 2))).replace('%d', d(n.getDate(), 2))).replace('%H', `${d(n.getHours(), 2)}`)).replace('%M', `${d(n.getMinutes(), 2)}`)).replace('%S', `${d(n.getSeconds(), 2)}`)).replace('%I', `${(n.getHours() + 11) % 12 + 1}`)).replace('%p', n.getHours() < 12 ? 'AM' : 'PM')).replace('%B', `${e.translate(s[n.getMonth()])}`)).replace('%b', `${e.translate(m[n.getMonth()])}`)).replace('%A', `${e.translate(c[n.getDay()])}`)).replace('%a', `${e.translate(u[n.getDay()])}`)).replace('%%', '%') }; const f = function (e, t) { if (l(e)) { const n = p(e, t); let r = void 0; r = /%[HMSIp]/.test(t) ? p(e, '%Y-%m-%dT%H:%M') : p(e, '%Y-%m-%d'); const a = e.dom.getParent(e.selection.getStart(), 'time'); a ? (o = a, u = r, c = n, m = (i = e).dom.create('time', { datetime: u }, c), o.parentNode.insertBefore(m, o), i.dom.remove(o), i.selection.select(m, !0), i.selection.collapse(!1)) : e.insertContent(`<time datetime="${r}">${n}</time>`) } else e.insertContent(p(e, t)); let i, o, u, c, m }; const g = p; const y = function (e) { e.addCommand('mceInsertDate', () => { f(e, t(e)) }), e.addCommand('mceInsertTime', () => { f(e, a(e)) }) }; const M = tinymce.util.Tools.resolve('tinymce.util.Tools'); var S = function (e) { let t = e; const n = function () { return t }; return { get: n, set(e) { t = e }, clone() { return S(n()) } } }; const v = function (n) { const t = i(n); const r = S(o(n)); n.ui.registry.addSplitButton('insertdatetime', { icon: 'insert-time', tooltip: 'Insert date/time', fetch(e) { e(M.map(t, (e) => ({ type: 'choiceitem', text: g(n, e), value: e }))) }, onAction() { for (let e = [], t = 0; t < arguments.length; t++)e[t] = arguments[t]; f(n, r.get()) }, onItemAction(e, t) { r.set(t), f(n, t) } }), n.ui.registry.addNestedMenuItem('insertdatetime', { icon: 'insert-time', text: 'Date/time', getSubmenuItems() { return M.map(t, (e) => { return { type: 'menuitem', text: g(n, e), onAction: (t = e, function () { r.set(t), f(n, t) }) }; let t }) } }) }; e.add('insertdatetime', (e) => { y(e), v(e) }), function h() {}
}())
