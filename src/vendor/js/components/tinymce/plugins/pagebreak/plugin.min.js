!(function () {
  const e = tinymce.util.Tools.resolve('tinymce.PluginManager'); const n = tinymce.util.Tools.resolve('tinymce.Env'); const a = function (e) { return e.getParam('pagebreak_separator', '\x3c!-- pagebreak --\x3e') }; const i = function (e) { return e.getParam('pagebreak_split_block', !1) }; const t = function () { return 'mce-pagebreak' }; const r = function () { return `<img src="${n.transparentSrc}" class="mce-pagebreak" data-mce-resize="false" data-mce-placeholder />` }; const o = function (o) { const c = a(o); const n = new RegExp(c.replace(/[\?\.\*\[\]\(\)\{\}\+\^\$\:]/g, (e) => `\\${e}`), 'gi'); o.on('BeforeSetContent', (e) => { e.content = e.content.replace(n, r()) }), o.on('PreInit', () => { o.serializer.addNodeFilter('img', (e) => { for (var n, a, t = e.length; t--;) if ((a = (n = e[t]).attr('class')) && a.indexOf('mce-pagebreak') !== -1) { const r = n.parent; if (o.schema.getBlockElements()[r.name] && i(o)) { r.type = 3, r.value = c, r.raw = !0, n.remove(); continue }n.type = 3, n.value = c, n.raw = !0 } }) }) }; const c = r; const u = t; const g = function (e) { e.addCommand('mcePageBreak', () => { e.settings.pagebreak_split_block ? e.insertContent(`<p>${c()}</p>`) : e.insertContent(c()) }) }; const m = function (n) { n.on('ResolveName', (e) => { e.target.nodeName === 'IMG' && n.dom.hasClass(e.target, u()) && (e.name = 'pagebreak') }) }; const s = function (e) { e.ui.registry.addButton('pagebreak', { icon: 'page-break', tooltip: 'Page break', onAction() { return e.execCommand('mcePageBreak') } }), e.ui.registry.addMenuItem('pagebreak', { text: 'Page break', icon: 'page-break', onAction() { return e.execCommand('mcePageBreak') } }) }; e.add('pagebreak', (e) => { g(e), s(e), o(e), m(e) }), function l() {}
}())
