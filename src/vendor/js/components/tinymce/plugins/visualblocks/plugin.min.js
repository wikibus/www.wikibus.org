!(function () {
  var e = function (t) { let n = t; const o = function () { return n }; return { get: o, set(t) { n = t }, clone() { return e(o()) } } }; const t = tinymce.util.Tools.resolve('tinymce.PluginManager'); const i = function (t, n) { t.fire('VisualBlocks', { state: n }) }; const u = function (t, n, o) { t.dom.toggleClass(t.getBody(), 'mce-visualblocks'), o.set(!o.get()), i(t, o.get()) }; const c = function (t, n, o) { t.addCommand('mceVisualBlocks', () => { u(t, n, o) }) }; const s = function (t) { return t.getParam('visualblocks_default_state', !1, 'boolean') }; const r = function (n, t, o) { n.on('PreviewFormats AfterPreviewFormats', (t) => { o.get() && n.dom.toggleClass(n.getBody(), 'mce-visualblocks', t.type === 'afterpreviewformats') }), n.on('init', () => { s(n) && u(n, t, o) }), n.on('remove', () => { n.dom.removeClass(n.getBody(), 'mce-visualblocks') }) }; const o = function (o, e) { return function (n) { n.setActive(e.get()); const t = function (t) { return n.setActive(t.state) }; return o.on('VisualBlocks', t), function () { return o.off('VisualBlocks', t) } } }; const a = function (t, n) { t.ui.registry.addToggleButton('visualblocks', { icon: 'paragraph', tooltip: 'Show blocks', onAction() { return t.execCommand('mceVisualBlocks') }, onSetup: o(t, n) }), t.ui.registry.addToggleMenuItem('visualblocks', { text: 'Show blocks', onAction() { return t.execCommand('mceVisualBlocks') }, onSetup: o(t, n) }) }; t.add('visualblocks', (t, n) => { const o = e(!1); c(t, n, o), a(t, o), r(t, n, o) }), function n() {}
}())
