!(function () {
  const e = tinymce.util.Tools.resolve('tinymce.PluginManager'); const t = function (e, n) { e.focus(), e.undoManager.transact(() => { e.setContent(n) }), e.selection.setCursorLocation(), e.nodeChanged() }; const o = function (e) { return e.getContent({ source_view: !0 }) }; const n = function (n) { const e = o(n); n.windowManager.open({ title: 'Source Code', size: 'large', body: { type: 'panel', items: [{ type: 'textarea', name: 'code', flex: !0 }] }, buttons: [{ type: 'cancel', name: 'cancel', text: 'Cancel' }, { type: 'submit', name: 'save', text: 'Save', primary: !0 }], initialData: { code: e }, onSubmit(e) { t(n, e.getData().code), e.close() } }) }; const c = function (e) { e.addCommand('mceCodeEditor', () => { n(e) }) }; const i = function (e) { e.ui.registry.addButton('code', { icon: 'sourcecode', tooltip: 'Source code', onAction() { return n(e) } }), e.ui.registry.addMenuItem('code', { icon: 'sourcecode', text: 'Source code', onAction() { return n(e) } }) }; e.add('code', (e) => c(e), i(e), {}), function u() {}
}())
