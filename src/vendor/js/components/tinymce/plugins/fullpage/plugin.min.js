!(function () {
  let o; var l = function (t) { let e = t; const n = function () { return e }; return { get: n, set(t) { e = t }, clone() { return l(n()) } } }; const t = tinymce.util.Tools.resolve('tinymce.PluginManager'); const m = tinymce.util.Tools.resolve('tinymce.util.Tools'); const e = tinymce.util.Tools.resolve('tinymce.html.DomParser'); const f = tinymce.util.Tools.resolve('tinymce.html.Node'); const g = tinymce.util.Tools.resolve('tinymce.html.Serializer'); const p = function (t) { return t.getParam('fullpage_hide_in_source_view') }; const r = function (t) { return t.getParam('fullpage_default_xml_pi') }; const a = function (t) { return t.getParam('fullpage_default_encoding') }; const c = function (t) { return t.getParam('fullpage_default_font_family') }; const s = function (t) { return t.getParam('fullpage_default_font_size') }; const u = function (t) { return t.getParam('fullpage_default_text_color') }; const d = function (t) { return t.getParam('fullpage_default_title') }; const y = function (t) { return t.getParam('fullpage_default_doctype', '<!DOCTYPE html>') }; const h = function (t) { return e({ validate: !1, root_name: '#document' }).parse(t) }; const v = h; const n = function (t, e) { let n; let l; const i = h(e); const r = {}; function o(t, e) { return t.attr(e) || '' } return r.fontface = c(t), r.fontsize = s(t), (n = i.firstChild).type === 7 && (r.xml_pi = !0, (l = /encoding="([^"]+)"/.exec(n.value)) && (r.docencoding = l[1])), (n = i.getAll('#doctype')[0]) && (r.doctype = `<!DOCTYPE${n.value}>`), (n = i.getAll('title')[0]) && n.firstChild && (r.title = n.firstChild.value), m.each(i.getAll('meta'), (t) => { let e; const n = t.attr('name'); const l = t.attr('http-equiv'); n ? r[n.toLowerCase()] = t.attr('content') : l === 'Content-Type' && (e = /charset\s*=\s*(.*)\s*/gi.exec(t.attr('content'))) && (r.docencoding = e[1]) }), (n = i.getAll('html')[0]) && (r.langcode = o(n, 'lang') || o(n, 'xml:lang')), r.stylesheets = [], m.each(i.getAll('link'), (t) => { t.attr('rel') === 'stylesheet' && r.stylesheets.push(t.attr('href')) }), (n = i.getAll('body')[0]) && (r.langdir = o(n, 'dir'), r.style = o(n, 'style'), r.visited_color = o(n, 'vlink'), r.link_color = o(n, 'link'), r.active_color = o(n, 'alink')), r }; const _ = function (t, r, e) { let o; let n; let l; let a; let i; const c = t.dom; function s(t, e, n) { t.attr(e, n || undefined) } function u(t) { n.firstChild ? n.insert(t, n.firstChild) : n.append(t) }o = h(e), (n = o.getAll('head')[0]) || (a = o.getAll('html')[0], n = new f('head', 1), a.firstChild ? a.insert(n, a.firstChild, !0) : a.append(n)), a = o.firstChild, r.xml_pi ? (i = 'version="1.0"', r.docencoding && (i += ` encoding="${r.docencoding}"`), a.type !== 7 && (a = new f('xml', 7), o.insert(a, o.firstChild, !0)), a.value = i) : a && a.type === 7 && a.remove(), a = o.getAll('#doctype')[0], r.doctype ? (a || (a = new f('#doctype', 10), r.xml_pi ? o.insert(a, o.firstChild) : u(a)), a.value = r.doctype.substring(9, r.doctype.length - 1)) : a && a.remove(), a = null, m.each(o.getAll('meta'), (t) => { t.attr('http-equiv') === 'Content-Type' && (a = t) }), r.docencoding ? (a || ((a = new f('meta', 1)).attr('http-equiv', 'Content-Type'), a.shortEnded = !0, u(a)), a.attr('content', `text/html; charset=${r.docencoding}`)) : a && a.remove(), a = o.getAll('title')[0], r.title ? (a ? a.empty() : u(a = new f('title', 1)), a.append(new f('#text', 3)).value = r.title) : a && a.remove(), m.each('keywords,description,author,copyright,robots'.split(','), (t) => { let e; let n; const l = o.getAll('meta'); const i = r[t]; for (e = 0; e < l.length; e++) if ((n = l[e]).attr('name') === t) return void (i ? n.attr('content', i) : n.remove()); i && ((a = new f('meta', 1)).attr('name', t), a.attr('content', i), a.shortEnded = !0, u(a)) }); const d = {}; return m.each(o.getAll('link'), (t) => { t.attr('rel') === 'stylesheet' && (d[t.attr('href')] = t) }), m.each(r.stylesheets, (t) => { d[t] || ((a = new f('link', 1)).attr({ rel: 'stylesheet', text: 'text/css', href: t }), a.shortEnded = !0, u(a)), delete d[t] }), m.each(d, (t) => { t.remove() }), (a = o.getAll('body')[0]) && (s(a, 'dir', r.langdir), s(a, 'style', r.style), s(a, 'vlink', r.visited_color), s(a, 'link', r.link_color), s(a, 'alink', r.active_color), c.setAttribs(t.getBody(), { style: r.style, dir: r.dir, vLink: r.visited_color, link: r.link_color, aLink: r.active_color })), (a = o.getAll('html')[0]) && (s(a, 'lang', r.langcode), s(a, 'xml:lang', r.langcode)), n.firstChild || n.remove(), (l = g({ validate: !1, indent: !0, apply_source_formatting: !0, indent_before: 'head,html,body,meta,title,script,link,style', indent_after: 'head,html,body,meta,title,script,link,style' }).serialize(o)).substring(0, l.indexOf('</body>')) }; const b = Object.prototype.hasOwnProperty; const x = (o = function (t, e) { return e }, function () { for (var t = new Array(arguments.length), e = 0; e < t.length; e++)t[e] = arguments[e]; if (t.length === 0) throw new Error("Can't merge zero objects"); for (var n = {}, l = 0; l < t.length; l++) { const i = t[l]; for (const r in i)b.call(i, r) && (n[r] = o(n[r], i[r])) } return n }); const i = function (l, i) { const r = n(l, i.get()); const t = x({ title: '', keywords: '', description: '', robots: '', author: '', docencoding: '' }, r); l.windowManager.open({ title: 'Metadata and Document Properties', size: 'normal', body: { type: 'panel', items: [{ name: 'title', type: 'input', label: 'Title' }, { name: 'keywords', type: 'input', label: 'Keywords' }, { name: 'description', type: 'input', label: 'Description' }, { name: 'robots', type: 'input', label: 'Robots' }, { name: 'author', type: 'input', label: 'Author' }, { name: 'docencoding', type: 'input', label: 'Encoding' }] }, buttons: [{ type: 'cancel', name: 'cancel', text: 'Cancel' }, { type: 'submit', name: 'save', text: 'Save', primary: !0 }], initialData: t, onSubmit(t) { const e = t.getData(); const n = _(l, m.extend(r, e), i.get()); i.set(n), t.close() } }) }; const k = function (t, e) { t.addCommand('mceFullPageProperties', () => { i(t, e) }) }; const C = function (t, e) { return m.each(t, (t) => { e = e.replace(t, (t) => `\x3c!--mce:protected ${escape(t)}--\x3e`) }), e }; const w = function (t) { return t.replace(/<!--mce:protected ([\s\S]*?)-->/g, (t, e) => unescape(e)) }; const A = m.each; const P = function (t) { return t.replace(/<\/?[A-Z]+/g, (t) => t.toLowerCase()) }; const T = function (t) { let e; let n = ''; let l = ''; if (r(t)) { const i = a(t); n += `<?xml version="1.0" encoding="${i || 'ISO-8859-1'}" ?>\n` } return n += y(t), n += '\n<html>\n<head>\n', (e = d(t)) && (n += `<title>${e}</title>\n`), (e = a(t)) && (n += `<meta http-equiv="Content-Type" content="text/html; charset=${e}" />\n`), (e = c(t)) && (l += `font-family: ${e};`), (e = s(t)) && (l += `font-size: ${e};`), (e = u(t)) && (l += `color: ${e};`), n += `</head>\n<body${l ? ` style="${l}"` : ''}>\n` }; const O = function (r, o, a) { r.on('BeforeSetContent', (t) => { !(function (t, e, n, l) { let i; let r; let o; let a; let c; let s = ''; const u = t.dom; if (!(l.selection || (o = C(t.settings.protect, l.content), l.format === 'raw' && e.get() || l.source_view && p(t)))) { o.length !== 0 || l.source_view || (o = `${m.trim(e.get())}\n${m.trim(o)}\n${m.trim(n.get())}`), (i = (o = o.replace(/<(\/?)BODY/gi, '<$1body')).indexOf('<body')) !== -1 ? (i = o.indexOf('>', i), e.set(P(o.substring(0, i + 1))), (r = o.indexOf('</body', i)) === -1 && (r = o.length), l.content = m.trim(o.substring(i + 1, r)), n.set(P(o.substring(r)))) : (e.set(T(t)), n.set('\n</body>\n</html>')), a = v(e.get()), A(a.getAll('style'), (t) => { t.firstChild && (s += t.firstChild.value) }), (c = a.getAll('body')[0]) && u.setAttribs(t.getBody(), { style: c.attr('style') || '', dir: c.attr('dir') || '', vLink: c.attr('vlink') || '', link: c.attr('link') || '', aLink: c.attr('alink') || '' }), u.remove('fullpage_styles'); const d = t.getDoc().getElementsByTagName('head')[0]; s && (u.add(d, 'style', { id: 'fullpage_styles' }, s), (c = u.get('fullpage_styles')).styleSheet && (c.styleSheet.cssText = s)); const f = {}; m.each(d.getElementsByTagName('link'), (t) => { t.rel === 'stylesheet' && t.getAttribute('data-mce-fullpage') && (f[t.href] = t) }), m.each(a.getAll('link'), (t) => { const e = t.attr('href'); if (!e) return !0; f[e] || t.attr('rel') !== 'stylesheet' || u.add(d, 'link', { rel: 'stylesheet', text: 'text/css', href: e, 'data-mce-fullpage': '1' }), delete f[e] }), m.each(f, (t) => { t.parentNode.removeChild(t) }) } }(r, o, a, t)) }), r.on('GetContent', (t) => { let e, n, l, i; e = r, n = o.get(), l = a.get(), (i = t).selection || i.source_view && p(e) || (i.content = w(`${m.trim(n)}\n${m.trim(i.content)}\n${m.trim(l)}`)) }) }; const D = function (t) { t.ui.registry.addButton('fullpage', { tooltip: 'Metadata and document properties', icon: 'new-document', onAction() { t.execCommand('mceFullPageProperties') } }), t.ui.registry.addMenuItem('fullpage', { text: 'Metadata and document properties', icon: 'new-document', onAction() { t.execCommand('mceFullPageProperties') } }) }; t.add('fullpage', (t) => { const e = l(''); const n = l(''); k(t, e), D(t), O(t, e, n) }), function E() {}
}())
