!(function () {
  const e = tinymce.util.Tools.resolve('tinymce.PluginManager'); const t = function (e) { return function () { return e } }; function p(r) { for (var o = [], e = 1; e < arguments.length; e++)o[e - 1] = arguments[e]; return function () { for (var e = [], t = 0; t < arguments.length; t++)e[t] = arguments[t]; const n = o.concat(e); return r.apply(null, n) } } let n; let r; let o; let a; let i; let u; const l = t(!1); const c = t(!0); const s = l; const m = c; const f = function () { return d }; var d = (a = { fold(e, t) { return e() }, is: s, isSome: s, isNone: m, getOr: o = function (e) { return e }, getOrThunk: r = function (e) { return e() }, getOrDie(e) { throw new Error(e || 'error: getOrDie called on none.') }, getOrNull() { return null }, getOrUndefined() { return undefined }, or: o, orThunk: r, map: f, ap: f, each() {}, bind: f, flatten: f, exists: s, forall: m, filter: f, equals: n = function (e) { return e.isNone() }, equals_: n, toArray() { return [] }, toString: t('none()') }, Object.freeze && Object.freeze(a), a); var y = function (n) { const e = function () { return n }; const t = function () { return o }; const r = function (e) { return e(n) }; var o = { fold(e, t) { return t(n) }, is(e) { return n === e }, isSome: m, isNone: s, getOr: e, getOrThunk: e, getOrDie: e, getOrNull: e, getOrUndefined: e, or: t, orThunk: t, map(e) { return y(e(n)) }, ap(e) { return e.fold(f, (e) => y(e(n))) }, each(e) { e(n) }, bind: r, flatten: e, exists: r, forall: r, filter(e) { return e(n) ? o : d }, equals(e) { return e.is(n) }, equals_(e, t) { return e.fold(s, (e) => t(n, e)) }, toArray() { return [n] }, toString() { return `some(${n})` } }; return o }; const h = { some: y, none: f, from(e) { return e === null || e === undefined ? d : y(e) } }; const g = (i = 'function', function (e) { return (function (e) { if (e === null) return 'null'; const t = typeof e; return t === 'object' && Array.prototype.isPrototypeOf(e) ? 'array' : t === 'object' && String.prototype.isPrototypeOf(e) ? 'string' : t }(e)) === i }); const k = (u = Array.prototype.indexOf) === undefined ? function (e, t) { return A(e, t) } : function (e, t) { return u.call(e, t) }; const v = function (e, t) { return k(e, t) > -1 }; const b = function (e, t) { for (var n = e.length, r = new Array(n), o = 0; o < n; o++) { const a = e[o]; r[o] = t(a, o, e) } return r }; var A = function (e, t) { for (let n = 0, r = e.length; n < r; ++n) if (e[n] === t) return n; return -1 }; const C = (Array.prototype.slice, g(Array.from) && Array.from, [{ shortcuts: ['Meta + B'], action: 'Bold' }, { shortcuts: ['Meta + I'], action: 'Italic' }, { shortcuts: ['Meta + U'], action: 'Underline' }, { shortcuts: ['Meta + A'], action: 'Select all' }, { shortcuts: ['Meta + Y', 'Meta + Shift + Z'], action: 'Redo' }, { shortcuts: ['Meta + Z'], action: 'Undo' }, { shortcuts: ['Ctrl + Alt + 1'], action: 'Header 1' }, { shortcuts: ['Ctrl + Alt + 2'], action: 'Header 2' }, { shortcuts: ['Ctrl + Alt + 3'], action: 'Header 3' }, { shortcuts: ['Ctrl + Alt + 4'], action: 'Header 4' }, { shortcuts: ['Ctrl + Alt + 5'], action: 'Header 5' }, { shortcuts: ['Ctrl + Alt + 6'], action: 'Header 6' }, { shortcuts: ['Ctrl + Alt + 7'], action: 'Paragraph' }, { shortcuts: ['Ctrl + Alt + 8'], action: 'Div' }, { shortcuts: ['Ctrl + Alt + 9'], action: 'Address' }, { shortcuts: ['Alt + 0'], action: 'Open help dialog' }, { shortcuts: ['Alt + F9'], action: 'Focus to menubar' }, { shortcuts: ['Alt + F10'], action: 'Focus to toolbar' }, { shortcuts: ['Alt + F11'], action: 'Focus to element path' }, { shortcuts: ['Ctrl + F9'], action: 'Focus to contextual toolbar' }, { shortcuts: ['Shift + Enter'], action: 'Open popup menu for split buttons' }, { shortcuts: ['Meta + K'], action: 'Insert link (if link plugin activated)' }, { shortcuts: ['Meta + S'], action: 'Save (if save plugin activated)' }, { shortcuts: ['Meta + F'], action: 'Find (if searchreplace plugin activated)' }, { shortcuts: ['Meta + Shift + F'], action: 'Switch to or from fullscreen mode' }]); const O = Object.keys; const S = Object.hasOwnProperty; const w = tinymce.util.Tools.resolve('tinymce.Env'); const M = function (e) { const o = w.mac ? { alt: '&#x2325;', ctrl: '&#x2303;', shift: '&#x21E7;', meta: '&#x2318;' } : { meta: 'Ctrl ' }; const t = e.split('+'); const n = b(t, (e) => { let t; let n; const r = e.toLowerCase().trim(); return t = o, n = r, S.call(t, n) ? o[r] : e }); return w.mac ? n.join('').replace(/\s/, '') : n.join('+') }; const P = function () { return { title: 'Handy Shortcuts', items: [{ type: 'table', header: ['Action', 'Shortcut'], cells: b(C, (e) => { const t = b(e.shortcuts, M).join(' or '); return [e.action, t] }) }] } }; const x = function (e, o) { return e.replace(/\$\{([^{}]*)\}/g, (e, t) => { let n; const r = o[t]; return (n = typeof r) == 'string' || n === 'number' ? r.toString() : e }) }; const T = tinymce.util.Tools.resolve('tinymce.util.I18n'); const _ = [{ key: 'advlist', name: 'Advanced List' }, { key: 'anchor', name: 'Anchor' }, { key: 'autolink', name: 'Autolink' }, { key: 'autoresize', name: 'Autoresize' }, { key: 'autosave', name: 'Autosave' }, { key: 'bbcode', name: 'BBCode' }, { key: 'charmap', name: 'Character Map' }, { key: 'code', name: 'Code' }, { key: 'codesample', name: 'Code Sample' }, { key: 'colorpicker', name: 'Color Picker' }, { key: 'directionality', name: 'Directionality' }, { key: 'emoticons', name: 'Emoticons' }, { key: 'fullpage', name: 'Full Page' }, { key: 'fullscreen', name: 'Full Screen' }, { key: 'help', name: 'Help' }, { key: 'hr', name: 'Horizontal Rule' }, { key: 'image', name: 'Image' }, { key: 'imagetools', name: 'Image Tools' }, { key: 'importcss', name: 'Import CSS' }, { key: 'insertdatetime', name: 'Insert Date/Time' }, { key: 'legacyoutput', name: 'Legacy Output' }, { key: 'link', name: 'Link' }, { key: 'lists', name: 'Lists' }, { key: 'media', name: 'Media' }, { key: 'nonbreaking', name: 'Nonbreaking' }, { key: 'noneditable', name: 'Noneditable' }, { key: 'pagebreak', name: 'Page Break' }, { key: 'paste', name: 'Paste' }, { key: 'preview', name: 'Preview' }, { key: 'print', name: 'Print' }, { key: 'save', name: 'Save' }, { key: 'searchreplace', name: 'Search and Replace' }, { key: 'spellchecker', name: 'Spell Checker' }, { key: 'tabfocus', name: 'Tab Focus' }, { key: 'table', name: 'Table' }, { key: 'template', name: 'Template' }, { key: 'textcolor', name: 'Text Color' }, { key: 'textpattern', name: 'Text Pattern' }, { key: 'toc', name: 'Table of Contents' }, { key: 'visualblocks', name: 'Visual Blocks' }, { key: 'visualchars', name: 'Visual Characters' }, { key: 'wordcount', name: 'Word Count' }]; const F = function (e) { let t; let n; let r; let o; let a; let i; let u; let l; let c; let s; const m = p(x, '<a href="${url}" target="_blank" rel="noopener">${name}</a>'); const f = function (t, n) { return (function (e, t) { for (let n = 0, r = e.length; n < r; n++) { const o = e[n]; if (t(o, n, e)) return h.some(o) } return h.none() }(_, (e) => e.key === n)).fold(() => { const e = t.plugins[n].getMetadata; return typeof e === 'function' ? m(e()) : n }, (e) => m({ name: e.name, url: `https://www.tiny.cloud/docs/plugins/${e.key}` })) }; return { title: 'Plugins', items: [{ type: 'htmlpanel', html: [(n = e, n == null ? '' : `<div data-mce-tabstop="1" tabindex="-1">${r = n, i = O((o = r).plugins), u = o.settings.forced_plugins === undefined ? i : (function (e, t) { for (var n = [], r = 0, o = e.length; r < o; r++) { const a = e[r]; t(a, r, e) && n.push(a) } return n }(i, (a = p(v, o.settings.forced_plugins), function () { for (var e = [], t = 0; t < arguments.length; t++)e[t] = arguments[t]; return !a.apply(null, e) }))), l = b(u, (e) => `<li>${f(r, e)}</li>`), c = l.length, s = l.join(''), `<p><b>${T.translate(['Plugins installed ({0}):', c])}</b></p><ul>${s}</ul>`}</div>`), (t = b(['PowerPaste', 'Spell Checker Pro', 'Accessibility Checker', 'Advanced Code Editor', 'Enhanced Media Embed', 'Link Checker'], (e) => `<li>${T.translate(e)}</li>`).join(''), `<div data-mce-tabstop="1" tabindex="-1"><p><b>${T.translate('Premium plugins:')}</b></p><ul>${t}</ul><br /><p style="float: right;"><a href="https://www.tiny.cloud/pricing/?utm_campaign=editor_referral&utm_medium=help_dialog&utm_source=tinymce" target="_blank">${T.translate('Learn more...')}</a></p></div>`)].join('') }] } }; const H = tinymce.util.Tools.resolve('tinymce.EditorManager'); const j = function () { let e; let t; const n = `<a href="https://www.tinymce.com/docs/changelog/?utm_campaign=editor_referral&utm_medium=help_dialog&utm_source=tinymce" target="_blank">TinyMCE ${e = H.majorVersion, t = H.minorVersion, e.indexOf('@') === 0 ? 'X.X.X' : `${e}.${t}`}</a>`; return { title: 'Version', items: [{ type: 'htmlpanel', html: `<p>${T.translate(['You are using {0}', n])}</p>` }] } }; const E = function (t) { return function () { const e = { type: 'tabpanel', tabs: [P(), F(t), j()] }; t.windowManager.open({ title: 'Help', size: 'medium', body: e, buttons: [{ type: 'cancel', name: 'close', text: 'Close', primary: !0 }], initialData: {} }) } }; const I = function (e) { e.addCommand('mceHelp', E(e)) }; const B = function (e) { e.ui.registry.addButton('help', { icon: 'help', tooltip: 'Help', onAction: E(e) }), e.ui.registry.addMenuItem('help', { text: 'Help', icon: 'help', shortcut: 'Alt+0', onAction: E(e) }) }; e.add('help', (e) => { B(e), I(e), e.shortcuts.add('Alt+0', 'Open help dialog', 'mceHelp') }), function D() {}
}())
