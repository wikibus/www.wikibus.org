/*!
 * bootstrap-fileinput v4.5.2
 * http://plugins.krajee.com/file-input
 *
 * Author: Kartik Visweswaran
 * Copyright: 2014 - 2018, Kartik Visweswaran, Krajee.com
 *
 * Licensed under the BSD 3-Clause
 * https://github.com/kartik-v/bootstrap-fileinput/blob/master/LICENSE.md
 */
!(function (e) {
  typeof define === 'function' && define.amd ? define(['jquery'], e) : typeof module === 'object' && module.exports ? module.exports = e(require('jquery')) : e(window.jQuery)
}((e) => {
  e.fn.fileinputLocales = {}, e.fn.fileinputThemes = {}, String.prototype.setTokens = function (e) { let t; let i; let a = this.toString(); for (t in e)e.hasOwnProperty(t) && (i = new RegExp(`{${t}}`, 'g'), a = a.replace(i, e[t])); return a }; let t, i; t = { FRAMES: '.kv-preview-thumb', SORT_CSS: 'file-sortable', OBJECT_PARAMS: '<param name="controller" value="true" />\n<param name="allowFullScreen" value="true" />\n<param name="allowScriptAccess" value="always" />\n<param name="autoPlay" value="false" />\n<param name="autoStart" value="false" />\n<param name="quality" value="high" />\n', DEFAULT_PREVIEW: '<div class="file-preview-other">\n<span class="{previewFileIconClass}">{previewFileIcon}</span>\n</div>', MODAL_ID: 'kvFileinputModal', MODAL_EVENTS: ['show', 'shown', 'hide', 'hidden', 'loaded'], objUrl: window.URL || window.webkitURL, createObjectURL(e) { return t.objUrl && t.objUrl.createObjectURL && e ? t.objUrl.createObjectURL(e) : '' }, revokeObjectURL(e) { t.objUrl && t.objUrl.revokeObjectURL && e && t.objUrl.revokeObjectURL(e) }, compare(e, t, i) { return void 0 !== e && (i ? e === t : e.match(t)) }, isIE(e) { let t, i; return navigator.appName !== 'Microsoft Internet Explorer' ? !1 : e === 10 ? new RegExp(`msie\\s${e}`, 'i').test(navigator.userAgent) : (t = document.createElement('div'), t.innerHTML = `<!--[if IE ${e}]> <i></i> <![endif]-->`, i = t.getElementsByTagName('i').length, document.body.appendChild(t), t.parentNode.removeChild(t), i) }, canAssignFilesToInput() { const e = document.createElement('input'); try { return e.type = 'file', e.files = null, !0 } catch (t) { return !1 } }, getDragDropFolders(e) { let t; let i; const a = e ? e.length : 0; let r = 0; if (a > 0 && e[0].webkitGetAsEntry()) for (t = 0; a > t; t++)i = e[t].webkitGetAsEntry(), i && i.isDirectory && r++; return r }, initModal(t) { const i = e('body'); i.length && t.appendTo(i) }, isEmpty(t, i) { return void 0 === t || t === null || t.length === 0 || i && e.trim(t) === '' }, isArray(e) { return Array.isArray(e) || Object.prototype.toString.call(e) === '[object Array]' }, ifSet(e, t, i) { return i = i || '', t && typeof t === 'object' && e in t ? t[e] : i }, cleanArray(e) { return e instanceof Array || (e = []), e.filter((e) => void 0 !== e && e !== null) }, spliceArray(t, i, a) { let r; let n; let o = 0; const l = []; if (!(t instanceof Array)) return []; for (n = e.extend(!0, [], t), a && n.reverse(), r = 0; r < n.length; r++)r !== i && (l[o] = n[r], o++); return a && l.reverse(), l }, getNum(e, t) { return t = t || 0, typeof e === 'number' ? e : (typeof e === 'string' && (e = parseFloat(e)), isNaN(e) ? t : e) }, hasFileAPISupport() { return !(!window.File || !window.FileReader) }, hasDragDropSupport() { const e = document.createElement('div'); return !t.isIE(9) && (void 0 !== e.draggable || void 0 !== e.ondragstart && void 0 !== e.ondrop) }, hasFileUploadSupport() { return t.hasFileAPISupport() && window.FormData }, hasBlobSupport() { try { return !!window.Blob && Boolean(new Blob()) } catch (e) { return !1 } }, hasArrayBufferViewSupport() { try { return new Blob([new Uint8Array(100)]).size === 100 } catch (e) { return !1 } }, dataURI2Blob(e) { let i; let a; let r; let n; let o; let l; const s = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder; const d = t.hasBlobSupport(); const c = (d || s) && window.atob && window.ArrayBuffer && window.Uint8Array; if (!c) return null; for (i = e.split(',')[0].indexOf('base64') >= 0 ? atob(e.split(',')[1]) : decodeURIComponent(e.split(',')[1]), a = new ArrayBuffer(i.length), r = new Uint8Array(a), n = 0; n < i.length; n += 1)r[n] = i.charCodeAt(n); return o = e.split(',')[0].split(':')[1].split(';')[0], d ? new Blob([t.hasArrayBufferViewSupport() ? r : a], { type: o }) : (l = new s(), l.append(a), l.getBlob(o)) }, arrayBuffer2String(e) { if (window.TextDecoder) return new TextDecoder('utf-8').decode(e); let t; let i; let a; let r; const n = Array.prototype.slice.apply(new Uint8Array(e)); let o = ''; let l = 0; for (t = n.length; t > l;) switch (i = n[l++], i >> 4) { case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:o += String.fromCharCode(i); break; case 12:case 13:a = n[l++], o += String.fromCharCode((31 & i) << 6 | 63 & a); break; case 14:a = n[l++], r = n[l++], o += String.fromCharCode((15 & i) << 12 | (63 & a) << 6 | (63 & r) << 0) } return o }, isHtml(e) { const t = document.createElement('div'); t.innerHTML = e; for (let i = t.childNodes, a = i.length; a--;) if (i[a].nodeType === 1) return !0; return !1 }, isSvg(e) { return e.match(/^\s*<\?xml/i) && (e.match(/<!DOCTYPE svg/i) || e.match(/<svg/i)) }, getMimeType(e, t, i) { switch (e) { case 'ffd8ffe0':case 'ffd8ffe1':case 'ffd8ffe2':return 'image/jpeg'; case '89504E47':return 'image/png'; case '47494638':return 'image/gif'; case '49492a00':return 'image/tiff'; case '52494646':return 'image/webp'; case '66747970':return 'video/3gp'; case '4f676753':return 'video/ogg'; case '1a45dfa3':return 'video/mkv'; case '000001ba':case '000001b3':return 'video/mpeg'; case '3026b275':return 'video/wmv'; case '25504446':return 'application/pdf'; case '25215053':return 'application/ps'; case '504b0304':case '504b0506':case '504b0508':return 'application/zip'; case '377abcaf':return 'application/7z'; case '75737461':return 'application/tar'; case '7801730d':return 'application/dmg'; default:switch (e.substring(0, 6)) { case '435753':return 'application/x-shockwave-flash'; case '494433':return 'audio/mp3'; case '425a68':return 'application/bzip'; default:switch (e.substring(0, 4)) { case '424d':return 'image/bmp'; case 'fffb':return 'audio/mp3'; case '4d5a':return 'application/exe'; case '1f9d':case '1fa0':return 'application/zip'; case '1f8b':return 'application/gzip'; default:return t && !t.match(/[^\u0000-\u007f]/) ? 'application/text-plain' : i } } } }, addCss(e, t) { e.removeClass(t).addClass(t) }, getElement(i, a, r) { return t.isEmpty(i) || t.isEmpty(i[a]) ? r : e(i[a]) }, uniqId() { return `${Math.round((new Date()).getTime())}_${Math.round(100 * Math.random())}` }, htmlEncode(e, t) { return void 0 === e ? t || null : e.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&apos;') }, replaceTags(t, i) { let a = t; return i ? (e.each(i, (e, t) => { typeof t === 'function' && (t = t()), a = a.split(e).join(t) }), a) : a }, cleanMemory(e) { const i = e.is('img') ? e.attr('src') : e.find('source').attr('src'); t.revokeObjectURL(i) }, findFileName(e) { let t = e.lastIndexOf('/'); return t === -1 && (t = e.lastIndexOf('\\')), e.split(e.substring(t, t + 1)).pop() }, checkFullScreen() { return document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement }, toggleFullScreen(e) { const i = document; const a = i.documentElement; a && e && !t.checkFullScreen() ? a.requestFullscreen ? a.requestFullscreen() : a.msRequestFullscreen ? a.msRequestFullscreen() : a.mozRequestFullScreen ? a.mozRequestFullScreen() : a.webkitRequestFullscreen && a.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT) : i.exitFullscreen ? i.exitFullscreen() : i.msExitFullscreen ? i.msExitFullscreen() : i.mozCancelFullScreen ? i.mozCancelFullScreen() : i.webkitExitFullscreen && i.webkitExitFullscreen() }, moveArray(t, i, a, r) { const n = e.extend(!0, [], t); if (r && n.reverse(), a >= n.length) for (let o = a - n.length; o-- + 1;)n.push(void 0); return n.splice(a, 0, n.splice(i, 1)[0]), r && n.reverse(), n }, cleanZoomCache(e) { let t = e.closest('.kv-zoom-cache-theme'); t.length || (t = e.closest('.kv-zoom-cache')), t.remove() }, closeButton(e) { return e = e ? `close ${e}` : 'close', `<button type="button" class="${e}" aria-label="Close">\n  <span aria-hidden="true">&times;</span>\n</button>` }, getRotation(e) { switch (e) { case 2:return 'rotateY(180deg)'; case 3:return 'rotate(180deg)'; case 4:return 'rotate(180deg) rotateY(180deg)'; case 5:return 'rotate(270deg) rotateY(180deg)'; case 6:return 'rotate(90deg)'; case 7:return 'rotate(90deg) rotateY(180deg)'; case 8:return 'rotate(270deg)'; default:return '' } }, setTransform(e, t) { e && (e.style.transform = t, e.style.webkitTransform = t, e.style['-moz-transform'] = t, e.style['-ms-transform'] = t, e.style['-o-transform'] = t) }, setImageOrientation(e, i, a) { if (e && e.length) { const r = 'load.fileinputimageorient'; e.off(r).on(r, () => { const r = e.get(0); const n = i && i.length ? i.get(0) : null; const o = r.offsetHeight; const l = r.offsetWidth; const s = t.getRotation(a); if (e.data('orientation', a), n && i.data('orientation', a), a < 5) return t.setTransform(r, s), void t.setTransform(n, s); const d = Math.atan(l / o); const c = Math.sqrt(Math.pow(o, 2) + Math.pow(l, 2)); const p = c ? o / Math.cos(Math.PI / 2 + d) / c : 1; const u = ` scale(${Math.abs(p)})`; t.setTransform(r, s + u), t.setTransform(n, s + u) }) } } }, i = function (i, a) { const r = this; r.$element = e(i), r.$parent = r.$element.parent(), r._validate() && (r.isPreviewable = t.hasFileAPISupport(), r.isIE9 = t.isIE(9), r.isIE10 = t.isIE(10), (r.isPreviewable || r.isIE9) && (r._init(a), r._listen()), r.$element.removeClass('file-loading')) }, i.prototype = { constructor: i, _cleanup() { const e = this; e.reader = null, e.formdata = {}, e.uploadCount = 0, e.uploadStatus = {}, e.uploadLog = [], e.uploadAsyncCount = 0, e.loadedImages = [], e.totalImagesCount = 0, e.ajaxRequests = [], e.clearStack(), e.fileBatchCompleted = !0, e.isPreviewable || (e.showPreview = !1), e.isError = !1, e.ajaxAborted = !1, e.cancelling = !1 }, _init(i, a) { let r; let n; let o; let l; const s = this; const d = s.$element; s.options = i, e.each(i, (e, i) => { switch (e) { case 'minFileCount':case 'maxFileCount':case 'minFileSize':case 'maxFileSize':case 'maxFilePreviewSize':case 'resizeImageQuality':case 'resizeIfSizeMoreThan':case 'progressUploadThreshold':case 'initialPreviewCount':case 'zoomModalHeight':case 'minImageHeight':case 'maxImageHeight':case 'minImageWidth':case 'maxImageWidth':s[e] = t.getNum(i); break; default:s[e] = i } }), s.rtl && (l = s.previewZoomButtonIcons.prev, s.previewZoomButtonIcons.prev = s.previewZoomButtonIcons.next, s.previewZoomButtonIcons.next = l), a || s._cleanup(), s.$form = d.closest('form'), s._initTemplateDefaults(), s.uploadFileAttr = t.isEmpty(d.attr('name')) ? 'file_data' : d.attr('name'), o = s._getLayoutTemplate('progress'), s.progressTemplate = o.replace('{class}', s.progressClass), s.progressCompleteTemplate = o.replace('{class}', s.progressCompleteClass), s.progressErrorTemplate = o.replace('{class}', s.progressErrorClass), s.isDisabled = d.attr('disabled') || d.attr('readonly'), s.isDisabled && d.attr('disabled', !0), s.isClickable = s.browseOnZoneClick && s.showPreview && (s.dropZoneEnabled || !t.isEmpty(s.defaultPreviewContent)), s.isAjaxUpload = t.hasFileUploadSupport() && !t.isEmpty(s.uploadUrl), s.dropZoneEnabled = t.hasDragDropSupport() && s.dropZoneEnabled, s.isAjaxUpload || (s.dropZoneEnabled = s.dropZoneEnabled && t.canAssignFilesToInput()), s.slug = typeof i.slugCallback === 'function' ? i.slugCallback : s._slugDefault, s.mainTemplate = s.showCaption ? s._getLayoutTemplate('main1') : s._getLayoutTemplate('main2'), s.captionTemplate = s._getLayoutTemplate('caption'), s.previewGenericTemplate = s._getPreviewTemplate('generic'), !s.imageCanvas && s.resizeImage && (s.maxImageWidth || s.maxImageHeight) && (s.imageCanvas = document.createElement('canvas'), s.imageCanvasContext = s.imageCanvas.getContext('2d')), t.isEmpty(d.attr('id')) && d.attr('id', t.uniqId()), s.namespace = `.fileinput_${d.attr('id').replace(/-/g, '_')}`, void 0 === s.$container ? s.$container = s._createContainer() : s._refreshContainer(), n = s.$container, s.$dropZone = n.find('.file-drop-zone'), s.$progress = n.find('.kv-upload-progress'), s.$btnUpload = n.find('.fileinput-upload'), s.$captionContainer = t.getElement(i, 'elCaptionContainer', n.find('.file-caption')), s.$caption = t.getElement(i, 'elCaptionText', n.find('.file-caption-name')), t.isEmpty(s.msgPlaceholder) || (r = d.attr('multiple') ? s.filePlural : s.fileSingle, s.$caption.attr('placeholder', s.msgPlaceholder.replace('{files}', r))), s.$captionIcon = s.$captionContainer.find('.file-caption-icon'), s.$previewContainer = t.getElement(i, 'elPreviewContainer', n.find('.file-preview')), s.$preview = t.getElement(i, 'elPreviewImage', n.find('.file-preview-thumbnails')), s.$previewStatus = t.getElement(i, 'elPreviewStatus', n.find('.file-preview-status')), s.$errorContainer = t.getElement(i, 'elErrorContainer', s.$previewContainer.find('.kv-fileinput-error')), s._validateDisabled(), t.isEmpty(s.msgErrorClass) || t.addCss(s.$errorContainer, s.msgErrorClass), a ? s._errorsExist() || s.$errorContainer.hide() : (s.$errorContainer.hide(), s.previewInitId = `preview-${t.uniqId()}`, s._initPreviewCache(), s._initPreview(!0), s._initPreviewActions(), s.$parent.hasClass('file-loading') && (s.$container.insertBefore(s.$parent), s.$parent.remove())), s._setFileDropZoneTitle(), d.attr('disabled') && s.disable(), s._initZoom(), s.hideThumbnailContent && t.addCss(s.$preview, 'hide-content') }, _initTemplateDefaults() { let i; let a; let r; let n; let o; let l; let s; let d; let c; let p; let u; let f; let m; let v; let g; let h; let w; let _; let b; let C; let y; let x; let T; let E; let S; let k; let F; let P; let I; let A; let D; let z; let $; let j; let U; let R; let B; let O; let L; let M; const Z = this; i = '{preview}\n<div class="kv-upload-progress kv-hidden"></div><div class="clearfix"></div>\n<div class="input-group {class}">\n  {caption}\n<div class="input-group-btn input-group-append">\n      {remove}\n      {cancel}\n      {upload}\n      {browse}\n    </div>\n</div>', a = '{preview}\n<div class="kv-upload-progress kv-hidden"></div>\n<div class="clearfix"></div>\n{remove}\n{cancel}\n{upload}\n{browse}\n', r = '<div class="file-preview {class}">\n    {close}    <div class="{dropClass}">\n    <div class="file-preview-thumbnails">\n    </div>\n    <div class="clearfix"></div>    <div class="file-preview-status text-center text-success"></div>\n    <div class="kv-fileinput-error"></div>\n    </div>\n</div>', o = t.closeButton('fileinput-remove'), n = '<i class="icon-file"></i>', l = '<div class="file-caption form-control {class}" tabindex="500">\n  <span class="file-caption-icon"></span>\n  <input class="file-caption-name" onkeydown="return false;" onpaste="return false;">\n</div>', s = '<button type="{type}" tabindex="500" title="{title}" class="{css}" {status}>{icon} {label}</button>', d = '<a href="{href}" tabindex="500" title="{title}" class="{css}" {status}>{icon} {label}</a>', c = '<div tabindex="500" class="{css}" {status}>{icon} {label}</div>', p = `<div id="${t.MODAL_ID}" class="file-zoom-dialog modal fade" tabindex="-1" aria-labelledby="${t.MODAL_ID}Label"></div>`, u = '<div class="modal-dialog modal-lg{rtl}" role="document">\n  <div class="modal-content">\n    <div class="modal-header">\n      <h5 class="modal-title">{heading}</h5>\n      <span class="kv-zoom-title"></span>\n      <div class="kv-zoom-actions">{toggleheader}{fullscreen}{borderless}{close}</div>\n    </div>\n    <div class="modal-body">\n      <div class="floating-buttons"></div>\n      <div class="kv-zoom-body file-zoom-content {zoomFrameClass}"></div>\n{prev} {next}\n    </div>\n  </div>\n</div>\n', f = '<div class="progress">\n    <div class="{class}" role="progressbar" aria-valuenow="{percent}" aria-valuemin="0" aria-valuemax="100" style="width:{percent}%;">\n        {status}\n     </div>\n</div>', m = ' <samp>({sizeText})</samp>', v = '<div class="file-thumbnail-footer">\n    <div class="file-footer-caption" title="{caption}">\n        <div class="file-caption-info">{caption}</div>\n        <div class="file-size-info">{size}</div>\n    </div>\n    {progress}\n{indicator}\n{actions}\n</div>', g = '<div class="file-actions">\n    <div class="file-footer-buttons">\n        {download} {upload} {delete} {zoom} {other}    </div>\n</div>\n{drag}\n<div class="clearfix"></div>', h = '<button type="button" class="kv-file-remove {removeClass}" title="{removeTitle}" {dataUrl}{dataKey}>{removeIcon}</button>\n', w = '<button type="button" class="kv-file-upload {uploadClass}" title="{uploadTitle}">{uploadIcon}</button>', _ = '<a class="kv-file-download {downloadClass}" title="{downloadTitle}" href="{downloadUrl}" download="{caption}" target="_blank">{downloadIcon}</a>', b = '<button type="button" class="kv-file-zoom {zoomClass}" title="{zoomTitle}">{zoomIcon}</button>', C = '<span class="file-drag-handle {dragClass}" title="{dragTitle}">{dragIcon}</span>', y = '<div class="file-upload-indicator" title="{indicatorTitle}">{indicator}</div>', x = '<div class="file-preview-frame {frameClass}" id="{previewId}" data-fileindex="{fileindex}" data-template="{template}"', T = `${x}><div class="kv-file-content">\n`, E = `${x} title="{caption}"><div class="kv-file-content">\n`, S = '</div>{footer}\n</div>\n', k = '{content}\n', O = ' {style}', F = `<div class="kv-preview-data file-preview-html" title="{caption}"${O}>{data}</div>\n`, P = `<img src="{data}" class="file-preview-image kv-preview-data" title="{caption}" alt="{caption}"${O}>\n`, I = `<textarea class="kv-preview-data file-preview-text" title="{caption}" readonly${O}>{data}</textarea>\n`, A = `<iframe class="kv-preview-data file-preview-office" src="https://view.officeapps.live.com/op/embed.aspx?src={data}"${O}></iframe>`, D = `<iframe class="kv-preview-data file-preview-gdocs" src="https://docs.google.com/gview?url={data}&embedded=true"${O}></iframe>`, z = `<video class="kv-preview-data file-preview-video" controls${O}>\n<source src="{data}" type="{type}">\n${t.DEFAULT_PREVIEW}\n</video>\n`, $ = `<!--suppress ALL --><audio class="kv-preview-data file-preview-audio" controls${O}>\n<source src="{data}" type="{type}">\n${t.DEFAULT_PREVIEW}\n</audio>\n`, j = `<embed class="kv-preview-data file-preview-flash" src="{data}" type="application/x-shockwave-flash"${O}>\n`, R = `<embed class="kv-preview-data file-preview-pdf" src="{data}" type="application/pdf"${O}>\n`, U = `<object class="kv-preview-data file-preview-object file-object {typeCss}" data="{data}" type="{type}"${O}>\n<param name="movie" value="{caption}" />\n${t.OBJECT_PARAMS} ${t.DEFAULT_PREVIEW}\n</object>\n`, B = `<div class="kv-preview-data file-preview-other-frame"${O}>\n${t.DEFAULT_PREVIEW}\n</div>\n`, L = '<div class="kv-zoom-cache" style="display:none">{zoomContent}</div>', M = { width: '100%', height: '100%', 'min-height': '480px' }, Z._isPdfRendered() && (R = Z.pdfRendererTemplate.replace('{renderer}', Z._encodeURI(Z.pdfRendererUrl))), Z.defaults = { layoutTemplates: { main1: i, main2: a, preview: r, close: o, fileIcon: n, caption: l, modalMain: p, modal: u, progress: f, size: m, footer: v, indicator: y, actions: g, actionDelete: h, actionUpload: w, actionDownload: _, actionZoom: b, actionDrag: C, btnDefault: s, btnLink: d, btnBrowse: c, zoomCache: L }, previewMarkupTags: { tagBefore1: T, tagBefore2: E, tagAfter: S }, previewContentTemplates: { generic: k, html: F, image: P, text: I, office: A, gdocs: D, video: z, audio: $, flash: j, object: U, pdf: R, other: B }, allowedPreviewTypes: ['image', 'html', 'text', 'video', 'audio', 'flash', 'pdf', 'object'], previewTemplates: {}, previewSettings: { image: { width: 'auto', height: 'auto', 'max-width': '100%', 'max-height': '100%' }, html: { width: '213px', height: '160px' }, text: { width: '213px', height: '160px' }, office: { width: '213px', height: '160px' }, gdocs: { width: '213px', height: '160px' }, video: { width: '213px', height: '160px' }, audio: { width: '100%', height: '30px' }, flash: { width: '213px', height: '160px' }, object: { width: '213px', height: '160px' }, pdf: { width: '100%', height: '160px' }, other: { width: '213px', height: '160px' } }, previewSettingsSmall: { image: { width: 'auto', height: 'auto', 'max-width': '100%', 'max-height': '100%' }, html: { width: '100%', height: '160px' }, text: { width: '100%', height: '160px' }, office: { width: '100%', height: '160px' }, gdocs: { width: '100%', height: '160px' }, video: { width: '100%', height: 'auto' }, audio: { width: '100%', height: '30px' }, flash: { width: '100%', height: 'auto' }, object: { width: '100%', height: 'auto' }, pdf: { width: '100%', height: '160px' }, other: { width: '100%', height: '160px' } }, previewZoomSettings: { image: { width: 'auto', height: 'auto', 'max-width': '100%', 'max-height': '100%' }, html: M, text: M, office: { width: '100%', height: '100%', 'max-width': '100%', 'min-height': '480px' }, gdocs: { width: '100%', height: '100%', 'max-width': '100%', 'min-height': '480px' }, video: { width: 'auto', height: '100%', 'max-width': '100%' }, audio: { width: '100%', height: '30px' }, flash: { width: 'auto', height: '480px' }, object: { width: 'auto', height: '100%', 'max-width': '100%', 'min-height': '480px' }, pdf: M, other: { width: 'auto', height: '100%', 'min-height': '480px' } }, mimeTypeAliases: { 'video/quicktime': 'video/mp4' }, fileTypeSettings: { image(e, i) { return t.compare(e, 'image.*') && !t.compare(e, /(tiff?|wmf)$/i) || t.compare(i, /\.(gif|png|jpe?g)$/i) }, html(e, i) { return t.compare(e, 'text/html') || t.compare(i, /\.(htm|html)$/i) }, office(e, i) { return t.compare(e, /(word|excel|powerpoint|office)$/i) || t.compare(i, /\.(docx?|xlsx?|pptx?|pps|potx?)$/i) }, gdocs(e, i) { return t.compare(e, /(word|excel|powerpoint|office|iwork-pages|tiff?)$/i) || t.compare(i, /\.(docx?|xlsx?|pptx?|pps|potx?|rtf|ods|odt|pages|ai|dxf|ttf|tiff?|wmf|e?ps)$/i) }, text(e, i) { return t.compare(e, 'text.*') || t.compare(i, /\.(xml|javascript)$/i) || t.compare(i, /\.(txt|md|csv|nfo|ini|json|php|js|css)$/i) }, video(e, i) { return t.compare(e, 'video.*') && (t.compare(e, /(ogg|mp4|mp?g|mov|webm|3gp)$/i) || t.compare(i, /\.(og?|mp4|webm|mp?g|mov|3gp)$/i)) }, audio(e, i) { return t.compare(e, 'audio.*') && (t.compare(i, /(ogg|mp3|mp?g|wav)$/i) || t.compare(i, /\.(og?|mp3|mp?g|wav)$/i)) }, flash(e, i) { return t.compare(e, 'application/x-shockwave-flash', !0) || t.compare(i, /\.(swf)$/i) }, pdf(e, i) { return t.compare(e, 'application/pdf', !0) || t.compare(i, /\.(pdf)$/i) }, object() { return !0 }, other() { return !0 } }, fileActionSettings: { showRemove: !0, showUpload: !0, showDownload: !0, showZoom: !0, showDrag: !0, removeIcon: '<i class="icon-trash"></i>', removeClass: 'btn btn-sm btn-kv btn-default btn-outline-secondary', removeErrorClass: 'btn btn-sm btn-kv btn-danger', removeTitle: 'Remove file', uploadIcon: '<i class="icon-upload"></i>', uploadClass: 'btn btn-sm btn-kv btn-default btn-outline-secondary', uploadTitle: 'Upload file', uploadRetryIcon: '<i class="icon-repeat"></i>', uploadRetryTitle: 'Retry upload', downloadIcon: '<i class="icon-download"></i>', downloadClass: 'btn btn-sm btn-kv btn-default btn-outline-secondary', downloadTitle: 'Download file', zoomIcon: '<i class="icon-zoom-in"></i>', zoomClass: 'btn btn-sm btn-kv btn-default btn-outline-secondary', zoomTitle: 'View Details', dragIcon: '<i class="icon-move"></i>', dragClass: 'text-info', dragTitle: 'Move / Rearrange', dragSettings: {}, indicatorNew: '<i class="icon-plus-sign text-warning"></i>', indicatorSuccess: '<i class="icon-ok-sign text-success"></i>', indicatorError: '<i class="icon-exclamation-sign text-danger"></i>', indicatorLoading: '<i class="icon-hourglass text-muted"></i>', indicatorNewTitle: 'Not uploaded yet', indicatorSuccessTitle: 'Uploaded', indicatorErrorTitle: 'Upload Error', indicatorLoadingTitle: 'Uploading ...' } }, e.each(Z.defaults, (t, i) => t === 'allowedPreviewTypes' ? void (void 0 === Z.allowedPreviewTypes && (Z.allowedPreviewTypes = i)) : void (Z[t] = e.extend(!0, {}, i, Z[t]))), Z._initPreviewTemplates() }, _initPreviewTemplates() { let i; const a = this; const r = a.previewMarkupTags; const n = r.tagAfter; e.each(a.previewContentTemplates, (e, o) => { t.isEmpty(a.previewTemplates[e]) && (i = r.tagBefore2, e !== 'generic' && e !== 'image' && e !== 'html' && e !== 'text' || (i = r.tagBefore1), a._isPdfRendered() && e === 'pdf' && (i = i.replace('kv-file-content', 'kv-file-content kv-pdf-rendered')), a.previewTemplates[e] = i + o + n) }) }, _initPreviewCache() { const i = this; i.previewCache = { data: {}, init() { let e = i.initialPreview; e.length > 0 && !t.isArray(e) && (e = e.split(i.initialPreviewDelimiter)), i.previewCache.data = { content: e, config: i.initialPreviewConfig, tags: i.initialPreviewThumbTags } }, count() { return i.previewCache.data && i.previewCache.data.content ? i.previewCache.data.content.length : 0 }, get(a, r) { let n; let o; let l; let s; let d; let c; let p; const u = `init_${a}`; const f = i.previewCache.data; const m = f.config[a]; const v = f.content[a]; const g = `${i.previewInitId}-${u}`; const h = t.ifSet('previewAsData', m, i.initialPreviewAsData); const w = function (e, a, r, n, o, l, s, d, c) { return d = ` file-preview-initial ${t.SORT_CSS}${d ? ` ${d}` : ''}`, i._generatePreviewTemplate(e, a, r, n, o, !1, null, d, l, s, c) }; return v ? (r = void 0 === r ? !0 : r, l = t.ifSet('type', m, i.initialPreviewFileType || 'generic'), d = t.ifSet('filename', m, t.ifSet('caption', m)), c = t.ifSet('filetype', m, l), s = i.previewCache.footer(a, r, m && m.size || null), p = t.ifSet('frameClass', m), n = h ? w(l, v, d, c, g, s, u, p) : w('generic', v, d, c, g, s, u, p, l).setTokens({ content: f.content[a] }), f.tags.length && f.tags[a] && (n = t.replaceTags(n, f.tags[a])), t.isEmpty(m) || t.isEmpty(m.frameAttr) || (o = e(document.createElement('div')).html(n), o.find('.file-preview-initial').attr(m.frameAttr), n = o.html(), o.remove()), n) : '' }, add(e, a, r, n) { let o; const l = i.previewCache.data; return t.isArray(e) || (e = e.split(i.initialPreviewDelimiter)), n ? (o = l.content.push(e) - 1, l.config[o] = a, l.tags[o] = r) : (o = e.length - 1, l.content = e, l.config = a, l.tags = r), i.previewCache.data = l, o }, set(e, a, r, n) { let o; let l; const s = i.previewCache.data; if (e && e.length && (t.isArray(e) || (e = e.split(i.initialPreviewDelimiter)), l = e.filter((e) => e !== null), l.length)) { if (void 0 === s.content && (s.content = []), void 0 === s.config && (s.config = []), void 0 === s.tags && (s.tags = []), n) { for (o = 0; o < e.length; o++)e[o] && s.content.push(e[o]); for (o = 0; o < a.length; o++)a[o] && s.config.push(a[o]); for (o = 0; o < r.length; o++)r[o] && s.tags.push(r[o]) } else s.content = e, s.config = a, s.tags = r; i.previewCache.data = s } }, unset(e) { const a = i.previewCache.count(); const r = i.reversePreviewOrder; if (a) { if (a === 1) return i.previewCache.data.content = [], i.previewCache.data.config = [], i.previewCache.data.tags = [], i.initialPreview = [], i.initialPreviewConfig = [], void (i.initialPreviewThumbTags = []); i.previewCache.data.content = t.spliceArray(i.previewCache.data.content, e, r), i.previewCache.data.config = t.spliceArray(i.previewCache.data.config, e, r), i.previewCache.data.tags = t.spliceArray(i.previewCache.data.tags, e, r) } }, out() { let e; let t; let a; let r = ''; const n = i.previewCache.count(); if (n === 0) return { content: '', caption: '' }; for (t = 0; n > t; t++)a = i.previewCache.get(t), r = i.reversePreviewOrder ? a + r : r + a; return e = i._getMsgSelected(n), { content: r, caption: e } }, footer(e, a, r) { const n = i.previewCache.data || {}; if (t.isEmpty(n.content)) return ''; (t.isEmpty(n.config) || t.isEmpty(n.config[e])) && (n.config[e] = {}), a = void 0 === a ? !0 : a; let o; const l = n.config[e]; const s = t.ifSet('caption', l); const d = t.ifSet('width', l, 'auto'); const c = t.ifSet('url', l, !1); const p = t.ifSet('key', l, null); const u = i.fileActionSettings; const f = i.initialPreviewShowDelete || !1; const m = l.downloadUrl || i.initialPreviewDownloadUrl || ''; const v = l.filename || l.caption || ''; const g = !!m; const h = t.ifSet('showRemove', l, t.ifSet('showRemove', u, f)); let w = t.ifSet('showDownload', l, t.ifSet('showDownload', u, g)); const _ = t.ifSet('showZoom', l, t.ifSet('showZoom', u, !0)); const b = t.ifSet('showDrag', l, t.ifSet('showDrag', u, !0)); const C = c === !1 && a; return w = w && l.downloadUrl !== !1 && !!m, o = i._renderFileActions(!1, w, h, _, b, C, c, p, !0, m, v), i._getLayoutTemplate('footer').setTokens({ progress: i._renderThumbProgress(), actions: o, caption: s, size: i._getSize(r), width: d, indicator: '' }) } }, i.previewCache.init() }, _isPdfRendered() { const e = this; const t = e.usePdfRenderer; const i = typeof t === 'function' ? t() : !!t; return i && e.pdfRendererUrl }, _handler(e, t, i) { const a = this; const r = a.namespace; const n = t.split(' ').join(`${r} `) + r; e && e.length && e.off(n).on(n, i) }, _encodeURI(e) { const t = this; return t.encodeUrl ? encodeURI(e) : e }, _log(e) { const t = this; const i = t.$element.attr('id'); i && (e = `"${i}": ${e}`), e = `bootstrap-fileinput: ${e}`, typeof window.console.log !== 'undefined' ? window.console.log(e) : window.alert(e) }, _validate() { const e = this; const t = e.$element.attr('type') === 'file'; return t || e._log('The input "type" must be set to "file" for initializing the "bootstrap-fileinput" plugin.'), t }, _errorsExist() { let t; const i = this; const a = i.$errorContainer.find('li'); return a.length ? !0 : (t = e(document.createElement('div')).html(i.$errorContainer.html()), t.find('.kv-error-close').remove(), t.find('ul').remove(), !!e.trim(t.text()).length) }, _errorHandler(e, t) { const i = this; const a = e.target.error; const r = function (e) { i._showError(e.replace('{name}', t)) }; r(a.code === a.NOT_FOUND_ERR ? i.msgFileNotFound : a.code === a.SECURITY_ERR ? i.msgFileSecured : a.code === a.NOT_READABLE_ERR ? i.msgFileNotReadable : a.code === a.ABORT_ERR ? i.msgFilePreviewAborted : i.msgFilePreviewError) }, _addError(e) { const t = this; const i = t.$errorContainer; e && i.length && (i.html(t.errorCloseButton + e), t._handler(i.find('.kv-error-close'), 'click', () => { setTimeout(() => { t.showPreview && !t.getFrames().length && t.clear(), i.fadeOut('slow') }, 10) })) }, _setValidationError(e) { const i = this; e = `${e ? `${e} ` : ''}has-error`, i.$container.removeClass(e).addClass('has-error'), t.addCss(i.$captionContainer, 'is-invalid') }, _resetErrors(e) { const t = this; const i = t.$errorContainer; t.isError = !1, t.$container.removeClass('has-error'), t.$captionContainer.removeClass('is-invalid'), i.html(''), e ? i.fadeOut('slow') : i.hide() }, _showFolderError(e) { let t; const i = this; const a = i.$errorContainer; e && (i.isAjaxUpload || i._clearFileInput(), t = i.msgFoldersNotAllowed.replace('{n}', e), i._addError(t), i._setValidationError(), a.fadeIn(800), i._raise('filefoldererror', [e, t])) }, _showUploadError(e, t, i) { const a = this; const r = a.$errorContainer; const n = i || 'fileuploaderror'; const o = t && t.id ? `<li data-file-id="${t.id}">${e}</li>` : `<li>${e}</li>`; return r.find('ul').length === 0 ? a._addError(`<ul>${o}</ul>`) : r.find('ul').append(o), r.fadeIn(800), a._raise(n, [t, e]), a._setValidationError('file-input-new'), !0 }, _showError(e, t, i) { const a = this; const r = a.$errorContainer; const n = i || 'fileerror'; return t = t || {}, t.reader = a.reader, a._addError(e), r.fadeIn(800), a._raise(n, [t, e]), a.isAjaxUpload || a._clearFileInput(), a._setValidationError('file-input-new'), a.$btnUpload.attr('disabled', !0), !0 }, _noFilesError(e) { const t = this; const i = t.minFileCount > 1 ? t.filePlural : t.fileSingle; const a = t.msgFilesTooLess.replace('{n}', t.minFileCount).replace('{files}', i); const r = t.$errorContainer; t._addError(a), t.isError = !0, t._updateFileDetails(0), r.fadeIn(800), t._raise('fileerror', [e, a]), t._clearFileInput(), t._setValidationError() }, _parseError(t, i, a, r) { let n; const o = this; let l = e.trim(`${a}`); let s = void 0 !== i.responseJSON && void 0 !== i.responseJSON.error ? i.responseJSON.error : i.responseText; return o.cancelling && o.msgUploadAborted && (l = o.msgUploadAborted), o.showAjaxErrorDetails && s && (s = e.trim(s.replace(/\n\s*\n/g, '\n')), n = s.length ? `<pre>${s}</pre>` : '', l += l ? n : s), l || (l = o.msgAjaxError.replace('{operation}', t)), o.cancelling = !1, r ? `<b>${r}: </b>${l}` : l }, _parseFileType(e, i) { let a; let r; let n; let o; const l = this; const s = l.allowedPreviewTypes || []; if (e === 'application/text-plain') return 'text'; for (o = 0; o < s.length; o++) if (n = s[o], a = l.fileTypeSettings[n], r = a(e, i) ? n : '', !t.isEmpty(r)) return r; return 'other' }, _getPreviewIcon(t) { let i; const a = this; let r = null; return t && t.indexOf('.') > -1 && (i = t.split('.').pop(), a.previewFileIconSettings && (r = a.previewFileIconSettings[i] || a.previewFileIconSettings[i.toLowerCase()] || null), a.previewFileExtSettings && e.each(a.previewFileExtSettings, (e, t) => a.previewFileIconSettings[e] && t(i) ? void (r = a.previewFileIconSettings[e]) : void 0)), r }, _parseFilePreviewIcon(e, t) { const i = this; const a = i._getPreviewIcon(t) || i.previewFileIcon; let r = e; return r.indexOf('{previewFileIcon}') > -1 && (r = r.setTokens({ previewFileIconClass: i.previewFileIconClass, previewFileIcon: a })), r }, _raise(t, i) { const a = this; const r = e.Event(t); if (void 0 !== i ? a.$element.trigger(r, i) : a.$element.trigger(r), r.isDefaultPrevented() || r.result === !1) return !1; switch (t) { case 'filebatchuploadcomplete':case 'filebatchuploadsuccess':case 'fileuploaded':case 'fileclear':case 'filecleared':case 'filereset':case 'fileerror':case 'filefoldererror':case 'fileuploaderror':case 'filebatchuploaderror':case 'filedeleteerror':case 'filecustomerror':case 'filesuccessremove':break; default:a.ajaxAborted || (a.ajaxAborted = r.result) } return !0 }, _listenFullScreen(e) { let t; let i; const a = this; const r = a.$modal; r && r.length && (t = r && r.find('.btn-fullscreen'), i = r && r.find('.btn-borderless'), t.length && i.length && (t.removeClass('active').attr('aria-pressed', 'false'), i.removeClass('active').attr('aria-pressed', 'false'), e ? t.addClass('active').attr('aria-pressed', 'true') : i.addClass('active').attr('aria-pressed', 'true'), r.hasClass('file-zoom-fullscreen') ? a._maximizeZoomDialog() : e ? a._maximizeZoomDialog() : i.removeClass('active').attr('aria-pressed', 'false'))) }, _listen() { let i; const a = this; const r = a.$element; const n = a.$form; const o = a.$container; a._handler(r, 'click', (e) => { r.hasClass('file-no-browse') && (r.data('zoneClicked') ? r.data('zoneClicked', !1) : e.preventDefault()) }), a._handler(r, 'change', e.proxy(a._change, a)), a.showBrowse && a._handler(a.$btnFile, 'click', e.proxy(a._browse, a)), a._handler(o.find('.fileinput-remove:not([disabled])'), 'click', e.proxy(a.clear, a)), a._handler(o.find('.fileinput-cancel'), 'click', e.proxy(a.cancel, a)), a._initDragDrop(), a._handler(n, 'reset', e.proxy(a.clear, a)), a.isAjaxUpload || a._handler(n, 'submit', e.proxy(a._submitForm, a)), a._handler(a.$container.find('.fileinput-upload'), 'click', e.proxy(a._uploadClick, a)), a._handler(e(window), 'resize', () => { a._listenFullScreen(screen.width === window.innerWidth && screen.height === window.innerHeight) }), i = 'webkitfullscreenchange mozfullscreenchange fullscreenchange MSFullscreenChange', a._handler(e(document), i, () => { a._listenFullScreen(t.checkFullScreen()) }), a._autoFitContent(), a._initClickable(), a._refreshPreview() }, _autoFitContent() { let t; const i = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth; const a = this; const r = i < 400 ? a.previewSettingsSmall || a.defaults.previewSettingsSmall : a.previewSettings || a.defaults.previewSettings; e.each(r, (e, i) => { t = `.file-preview-frame .file-preview-${e}`, a.$preview.find(`${t}.kv-preview-data,${t} .kv-preview-data`).css(i) }) }, _scanDroppedItems(e, t, i) { i = i || ''; let a; let r; let n; const o = this; const l = function (e) { o._log('Error scanning dropped files!'), o._log(e) }; e.isFile ? e.file((e) => { t.push(e) }, l) : e.isDirectory && (r = e.createReader(), (n = function () { r.readEntries((r) => { if (r && r.length > 0) { for (a = 0; a < r.length; a++)o._scanDroppedItems(r[a], t, `${i + e.name}/`); n() } return null }, l) })()) }, _initDragDrop() { const t = this; const i = t.$dropZone; t.dropZoneEnabled && t.showPreview && (t._handler(i, 'dragenter dragover', e.proxy(t._zoneDragEnter, t)), t._handler(i, 'dragleave', e.proxy(t._zoneDragLeave, t)), t._handler(i, 'drop', e.proxy(t._zoneDrop, t)), t._handler(e(document), 'dragenter dragover drop', t._zoneDragDropInit)) }, _zoneDragDropInit(e) { e.stopPropagation(), e.preventDefault() }, _zoneDragEnter(i) { const a = this; const r = i.originalEvent.dataTransfer; const n = e.inArray('Files', r.types) > -1; return a._zoneDragDropInit(i), a.isDisabled || !n ? (i.originalEvent.dataTransfer.effectAllowed = 'none', void (i.originalEvent.dataTransfer.dropEffect = 'none')) : void (a._raise('fileDragEnter', { sourceEvent: i, files: r.types.Files }) && t.addCss(a.$dropZone, 'file-highlighted')) }, _zoneDragLeave(e) { const t = this; t._zoneDragDropInit(e), t.isDisabled || t._raise('fileDragLeave', { sourceEvent: e }) && t.$dropZone.removeClass('file-highlighted') }, _zoneDrop(e) { let i; const a = this; const r = a.$element; const n = e.originalEvent.dataTransfer; let o = n.files; const l = n.items; const s = t.getDragDropFolders(l); const d = function () { a.isAjaxUpload ? a._change(e, o) : (a.changeTriggered = !0, r.get(0).files = o, setTimeout(() => { a.changeTriggered = !1, r.trigger(`change${a.namespace}`) }, 10)), a.$dropZone.removeClass('file-highlighted') }; if (e.preventDefault(), !a.isDisabled && !t.isEmpty(o) && a._raise('fileDragDrop', { sourceEvent: e, files: o })) if (s > 0) { if (!a.isAjaxUpload) return void a._showFolderError(s); for (o = [], i = 0; i < l.length; i++) { const c = l[i].webkitGetAsEntry(); c && a._scanDroppedItems(c, o) }setTimeout(() => { d() }, 500) } else d() }, _uploadClick(e) { let i; const a = this; const r = a.$container.find('.fileinput-upload'); const n = !r.hasClass('disabled') && t.isEmpty(r.attr('disabled')); if (!e || !e.isDefaultPrevented()) { if (!a.isAjaxUpload) return void (n && r.attr('type') !== 'submit' && (i = r.closest('form'), i.length && i.trigger('submit'), e.preventDefault())); e.preventDefault(), n && a.upload() } }, _submitForm() { const e = this; return e._isFileSelectionValid() && !e._abort({}) }, _clearPreview() { const i = this; const a = i.$preview; const r = i.showUploadedThumbs ? i.getFrames(':not(.file-preview-success)') : i.getFrames(); r.each(function () { const i = e(this); i.remove(), t.cleanZoomCache(a.find(`#zoom-${i.attr('id')}`)) }), i.getFrames().length && i.showPreview || i._resetUpload(), i._validateDefaultPreview() }, _initSortable() { let i; const a = this; const r = a.$preview; const n = `.${t.SORT_CSS}`; const o = a.reversePreviewOrder; window.KvSortable && r.find(n).length !== 0 && (i = { handle: '.drag-handle-init', dataIdAttr: 'data-preview-id', scroll: !1, draggable: n, onSort(i) { const r = i.oldIndex; const n = i.newIndex; let l = 0; a.initialPreview = t.moveArray(a.initialPreview, r, n, o), a.initialPreviewConfig = t.moveArray(a.initialPreviewConfig, r, n, o), a.previewCache.init(), a.getFrames('.file-preview-initial').each(function () { e(this).attr('data-fileindex', `init_${l}`), l++ }), a._raise('filesorted', { previewId: e(i.item).attr('id'), oldIndex: r, newIndex: n, stack: a.initialPreviewConfig }) } }, r.data('kvsortable') && r.kvsortable('destroy'), e.extend(!0, i, a.fileActionSettings.dragSettings), r.kvsortable(i)) }, _setPreviewContent(e) { const t = this; t.$preview.html(e), t._autoFitContent() }, _initPreview(e) { let i; const a = this; let r = a.initialCaption || ''; return a.previewCache.count() ? (i = a.previewCache.out(), r = e && a.initialCaption ? a.initialCaption : i.caption, a._setPreviewContent(i.content), a._setInitThumbAttr(), a._setCaption(r), a._initSortable(), void (t.isEmpty(i.content) || a.$container.removeClass('file-input-new'))) : (a._clearPreview(), void (e ? a._setCaption(r) : a._initCaption())) }, _getZoomButton(e) { const t = this; const i = t.previewZoomButtonIcons[e]; const a = t.previewZoomButtonClasses[e]; const r = ` title="${t.previewZoomButtonTitles[e] || ''}" `; let n = r + (e === 'close' ? ' data-dismiss="modal" aria-hidden="true"' : ''); return e !== 'fullscreen' && e !== 'borderless' && e !== 'toggleheader' || (n += ' data-toggle="button" aria-pressed="false" autocomplete="off"'), `<button type="button" class="${a} btn-${e}"${n}>${i}</button>` }, _getModalContent() { const e = this; return e._getLayoutTemplate('modal').setTokens({ rtl: e.rtl ? ' kv-rtl' : '', zoomFrameClass: e.frameClass, heading: e.msgZoomModalHeading, prev: e._getZoomButton('prev'), next: e._getZoomButton('next'), toggleheader: e._getZoomButton('toggleheader'), fullscreen: e._getZoomButton('fullscreen'), borderless: e._getZoomButton('borderless'), close: e._getZoomButton('close') }) }, _listenModalEvent(e) { const i = this; const a = i.$modal; const r = function (e) { return { sourceEvent: e, previewId: a.data('previewId'), modal: a } }; a.on(`${e}.bs.modal`, (n) => { const o = a.find('.btn-fullscreen'); const l = a.find('.btn-borderless'); i._raise(`filezoom${e}`, r(n)), e === 'shown' && (l.removeClass('active').attr('aria-pressed', 'false'), o.removeClass('active').attr('aria-pressed', 'false'), a.hasClass('file-zoom-fullscreen') && (i._maximizeZoomDialog(), t.checkFullScreen() ? o.addClass('active').attr('aria-pressed', 'true') : l.addClass('active').attr('aria-pressed', 'true'))) }) }, _initZoom() { let i; const a = this; const r = a._getLayoutTemplate('modalMain'); const n = `#${t.MODAL_ID}`; a.showPreview && (a.$modal = e(n), a.$modal && a.$modal.length || (i = e(document.createElement('div')).html(r).insertAfter(a.$container), a.$modal = e(n).insertBefore(i), i.remove()), t.initModal(a.$modal), a.$modal.html(a._getModalContent()), e.each(t.MODAL_EVENTS, (e, t) => { a._listenModalEvent(t) })) }, _initZoomButtons() { let t; let i; const a = this; const r = a.$modal.data('previewId') || ''; const n = a.getFrames().toArray(); const o = n.length; const l = a.$modal.find('.btn-prev'); const s = a.$modal.find('.btn-next'); return n.length < 2 ? (l.hide(), void s.hide()) : (l.show(), s.show(), void (o && (t = e(n[0]), i = e(n[o - 1]), l.removeAttr('disabled'), s.removeAttr('disabled'), t.length && t.attr('id') === r && l.attr('disabled', !0), i.length && i.attr('id') === r && s.attr('disabled', !0)))) }, _maximizeZoomDialog() { const t = this; const i = t.$modal; const a = i.find('.modal-header:visible'); const r = i.find('.modal-footer:visible'); const n = i.find('.modal-body'); let o = e(window).height(); let l = 0; i.addClass('file-zoom-fullscreen'), a && a.length && (o -= a.outerHeight(!0)), r && r.length && (o -= r.outerHeight(!0)), n && n.length && (l = n.outerHeight(!0) - n.height(), o -= l), i.find('.kv-zoom-body').height(o) }, _resizeZoomDialog(e) { const i = this; const a = i.$modal; const r = a.find('.btn-fullscreen'); const n = a.find('.btn-borderless'); if (a.hasClass('file-zoom-fullscreen'))t.toggleFullScreen(!1), e ? r.hasClass('active') || (a.removeClass('file-zoom-fullscreen'), i._resizeZoomDialog(!0), n.hasClass('active') && n.removeClass('active').attr('aria-pressed', 'false')) : r.hasClass('active') ? r.removeClass('active').attr('aria-pressed', 'false') : (a.removeClass('file-zoom-fullscreen'), i.$modal.find('.kv-zoom-body').css('height', i.zoomModalHeight)); else { if (!e) return void i._maximizeZoomDialog(); t.toggleFullScreen(!0) }a.focus() }, _setZoomContent(i, a) { let r; let n; let o; let l; let s; let d; let c; let p; let u; let f; const m = this; const v = i.attr('id'); const g = m.$preview.find(`#zoom-${v}`); const h = m.$modal; const w = h.find('.btn-fullscreen'); const _ = h.find('.btn-borderless'); const b = h.find('.btn-toggleheader'); n = g.attr('data-template') || 'generic', r = g.find('.kv-file-content'), o = r.length ? r.html() : '', u = i.data('caption') || '', f = i.data('size') || '', l = `${u} ${f}`, h.find('.kv-zoom-title').attr('title', e('<div/>').html(l).text()).html(l), s = h.find('.kv-zoom-body'), h.removeClass('kv-single-content'), a ? (p = s.addClass('file-thumb-loading').clone().insertAfter(s), s.html(o).hide(), p.fadeOut('fast', () => { s.fadeIn('fast', () => { s.removeClass('file-thumb-loading') }), p.remove() })) : s.html(o), c = m.previewZoomSettings[n], c && (d = s.find('.kv-preview-data'), t.addCss(d, 'file-zoom-detail'), e.each(c, (e, t) => { d.css(e, t), (d.attr('width') && e === 'width' || d.attr('height') && e === 'height') && d.removeAttr(e) })), h.data('previewId', v), m._handler(h.find('.btn-prev'), 'click', () => { m._zoomSlideShow('prev', v) }), m._handler(h.find('.btn-next'), 'click', () => { m._zoomSlideShow('next', v) }), m._handler(w, 'click', () => { m._resizeZoomDialog(!0) }), m._handler(_, 'click', () => { m._resizeZoomDialog(!1) }), m._handler(b, 'click', () => { let e; const t = h.find('.modal-header'); const i = h.find('.modal-body .floating-buttons'); const a = t.find('.kv-zoom-actions'); const r = function (e) { const i = m.$modal.find('.kv-zoom-body'); let a = m.zoomModalHeight; h.hasClass('file-zoom-fullscreen') && (a = i.outerHeight(!0), e || (a -= t.outerHeight(!0))), i.css('height', e ? a + e : a) }; t.is(':visible') ? (e = t.outerHeight(!0), t.slideUp('slow', () => { a.find('.btn').appendTo(i), r(e) })) : (i.find('.btn').appendTo(a), t.slideDown('slow', () => { r() })), h.focus() }), m._handler(h, 'keydown', function (t) { const i = t.which || t.keyCode; const a = e(this).find('.btn-prev'); const r = e(this).find('.btn-next'); const n = e(this).data('previewId'); const o = m.rtl ? 39 : 37; const l = m.rtl ? 37 : 39; i === o && a.length && !a.attr('disabled') && m._zoomSlideShow('prev', n), i === l && r.length && !r.attr('disabled') && m._zoomSlideShow('next', n) }) }, _zoomPreview(e) { let i; const a = this; const r = a.$modal; if (!e.length) throw 'Cannot zoom to detailed preview!'; t.initModal(r), r.html(a._getModalContent()), i = e.closest(t.FRAMES), a._setZoomContent(i), r.modal('show'), a._initZoomButtons() }, _zoomSlideShow(t, i) { let a; let r; let n; const o = this; const l = o.$modal.find(`.kv-zoom-actions .btn-${t}`); const s = o.getFrames().toArray(); const d = s.length; if (!l.attr('disabled')) { for (r = 0; d > r; r++) if (e(s[r]).attr('id') === i) { n = t === 'prev' ? r - 1 : r + 1; break }n < 0 || n >= d || !s[n] || (a = e(s[n]), a.length && o._setZoomContent(a, !0), o._initZoomButtons(), o._raise(`filezoom${t}`, { previewId: i, modal: o.$modal })) } }, _initZoomButton() { const t = this; t.$preview.find('.kv-file-zoom').each(function () { const i = e(this); t._handler(i, 'click', () => { t._zoomPreview(i) }) }) }, _inputFileCount() { return this.$element.get(0).files.length }, _refreshPreview() { let e; const t = this; t._inputFileCount() && t.showPreview && t.isPreviewable && (t.isAjaxUpload ? (e = t.getFileStack(), t.filestack = [], e.length ? t._clearFileInput() : e = t.$element.get(0).files) : e = t.$element.get(0).files, e && e.length && (t.readFiles(e), t._setFileDropZoneTitle())) }, _clearObjects(t) { t.find('video audio').each(function () { this.pause(), e(this).remove() }), t.find('img object div').each(function () { e(this).remove() }) }, _clearFileInput() { let t; let i; let a; const r = this; const n = r.$element; r._inputFileCount() && (t = n.closest('form'), i = e(document.createElement('form')), a = e(document.createElement('div')), n.before(a), t.length ? t.after(i) : a.after(i), i.append(n).trigger('reset'), a.before(n).remove(), i.remove()) }, _resetUpload() { const e = this; e.uploadCache = { content: [], config: [], tags: [], append: !0 }, e.uploadCount = 0, e.uploadStatus = {}, e.uploadLog = [], e.uploadAsyncCount = 0, e.loadedImages = [], e.totalImagesCount = 0, e.$btnUpload.removeAttr('disabled'), e._setProgress(0), e.$progress.hide(), e._resetErrors(!1), e.ajaxAborted = !1, e.ajaxRequests = [], e._resetCanvas(), e.cacheInitialPreview = {}, e.overwriteInitial && (e.initialPreview = [], e.initialPreviewConfig = [], e.initialPreviewThumbTags = [], e.previewCache.data = { content: [], config: [], tags: [] }) }, _resetCanvas() { const e = this; e.canvas && e.imageCanvasContext && e.imageCanvasContext.clearRect(0, 0, e.canvas.width, e.canvas.height) }, _hasInitialPreview() { const e = this; return !e.overwriteInitial && e.previewCache.count() }, _resetPreview() { let e; let t; const i = this; i.previewCache.count() ? (e = i.previewCache.out(), i._setPreviewContent(e.content), i._setInitThumbAttr(), t = i.initialCaption ? i.initialCaption : e.caption, i._setCaption(t)) : (i._clearPreview(), i._initCaption()), i.showPreview && (i._initZoom(), i._initSortable()) }, _clearDefaultPreview() { const e = this; e.$preview.find('.file-default-preview').remove() }, _validateDefaultPreview() { const e = this; e.showPreview && !t.isEmpty(e.defaultPreviewContent) && (e._setPreviewContent(`<div class="file-default-preview">${e.defaultPreviewContent}</div>`), e.$container.removeClass('file-input-new'), e._initClickable()) }, _resetPreviewThumbs(e) { let t; const i = this; return e ? (i._clearPreview(), void i.clearStack()) : void (i._hasInitialPreview() ? (t = i.previewCache.out(), i._setPreviewContent(t.content), i._setInitThumbAttr(), i._setCaption(t.caption), i._initPreviewActions()) : i._clearPreview()) }, _getLayoutTemplate(e) { const i = this; const a = i.layoutTemplates[e]; return t.isEmpty(i.customLayoutTags) ? a : t.replaceTags(a, i.customLayoutTags) }, _getPreviewTemplate(e) { const i = this; const a = i.previewTemplates[e]; return t.isEmpty(i.customPreviewTags) ? a : t.replaceTags(a, i.customPreviewTags) }, _getOutData(e, t, i) { const a = this; return e = e || {}, t = t || {}, i = i || a.filestack.slice(0) || {}, { form: a.formdata, files: i, filenames: a.filenames, filescount: a.getFilesCount(), extra: a._getExtraData(), response: t, reader: a.reader, jqXHR: e } }, _getMsgSelected(e) { const t = this; const i = e === 1 ? t.fileSingle : t.filePlural; return e > 0 ? t.msgSelected.replace('{n}', e).replace('{files}', i) : t.msgNoFilesSelected }, _getFrame(t) { const i = this; const a = e(`#${t}`); return a.length ? a : (i._log(`Invalid thumb frame with id: "${t}".`), null) }, _getThumbs(e) { return e = e || '', this.getFrames(`:not(.file-preview-initial)${e}`) }, _getExtraData(e, t) { const i = this; let a = i.uploadExtraData; return typeof i.uploadExtraData === 'function' && (a = i.uploadExtraData(e, t)), a }, _initXhr(e, t, i) { const a = this; return e.upload && e.upload.addEventListener('progress', (e) => { let r = 0; const n = e.total; const o = e.loaded || e.position; e.lengthComputable && (r = Math.floor(o / n * 100)), t ? a._setAsyncUploadStatus(t, r, i) : a._setProgress(r) }, !1), e }, _initAjaxSettings() { const t = this; t._ajaxSettings = e.extend(!0, {}, t.ajaxSettings), t._ajaxDeleteSettings = e.extend(!0, {}, t.ajaxDeleteSettings) }, _mergeAjaxCallback(e, t, i) { let a; const r = this; let n = r._ajaxSettings; let o = r.mergeAjaxCallbacks; i === 'delete' && (n = r._ajaxDeleteSettings, o = r.mergeAjaxDeleteCallbacks), a = n[e], o && typeof a === 'function' ? o === 'before' ? n[e] = function () { a.apply(this, arguments), t.apply(this, arguments) } : n[e] = function () { t.apply(this, arguments), a.apply(this, arguments) } : n[e] = t }, _ajaxSubmit(t, i, a, r, n, o) { let l; let s; const d = this; d._raise('filepreajax', [n, o]) && (d._uploadExtra(n, o), d._initAjaxSettings(), d._mergeAjaxCallback('beforeSend', t), d._mergeAjaxCallback('success', i), d._mergeAjaxCallback('complete', a), d._mergeAjaxCallback('error', r), s = o && d.uploadUrlThumb ? d.uploadUrlThumb : d.uploadUrl, l = e.extend(!0, {}, { xhr() { const t = e.ajaxSettings.xhr(); return d._initXhr(t, n, d.getFileStack().length) }, url: d._encodeURI(s), type: 'POST', dataType: 'json', data: d.formdata, cache: !1, processData: !1, contentType: !1 }, d._ajaxSettings), d.ajaxRequests.push(e.ajax(l))) }, _mergeArray(e, i) { const a = this; const r = t.cleanArray(a[e]); const n = t.cleanArray(i); a[e] = r.concat(n) }, _initUploadSuccess(i, a, r) { let n; let o; let l; let s; let d; let c; let p; let u; let f; const m = this; m.showPreview && typeof i === 'object' && !e.isEmptyObject(i) && void 0 !== i.initialPreview && i.initialPreview.length > 0 && (m.hasInitData = !0, c = i.initialPreview || [], p = i.initialPreviewConfig || [], u = i.initialPreviewThumbTags || [], n = void 0 === i.append || i.append, c.length > 0 && !t.isArray(c) && (c = c.split(m.initialPreviewDelimiter)), m._mergeArray('initialPreview', c), m._mergeArray('initialPreviewConfig', p), m._mergeArray('initialPreviewThumbTags', u), void 0 !== a ? r ? (f = a.attr('data-fileindex'), m.uploadCache.content[f] = c[0], m.uploadCache.config[f] = p[0] || [], m.uploadCache.tags[f] = u[0] || [], m.uploadCache.append = n) : (l = m.previewCache.add(c, p[0], u[0], n), o = m.previewCache.get(l, !1), s = e(document.createElement('div')).html(o).hide().insertAfter(a), d = s.find('.kv-zoom-cache'), d && d.length && d.insertAfter(a), a.fadeOut('slow', () => { const e = s.find('.file-preview-frame'); e && e.length && e.insertBefore(a).fadeIn('slow').css('display:inline-block'), m._initPreviewActions(), m._clearFileInput(), t.cleanZoomCache(m.$preview.find(`#zoom-${a.attr('id')}`)), a.remove(), s.remove(), m._initSortable() })) : (m.previewCache.set(c, p, u, n), m._initPreview(), m._initPreviewActions())) }, _initSuccessThumbs() { const i = this; i.showPreview && i._getThumbs(`${t.FRAMES}.file-preview-success`).each(function () { const a = e(this); const r = i.$preview; const n = a.find('.kv-file-remove'); n.removeAttr('disabled'), i._handler(n, 'click', () => { const e = a.attr('id'); const n = i._raise('filesuccessremove', [e, a.attr('data-fileindex')]); t.cleanMemory(a), n !== !1 && a.fadeOut('slow', () => { t.cleanZoomCache(r.find(`#zoom-${e}`)), a.remove(), i.getFrames().length || i.reset() }) }) }) }, _checkAsyncComplete() { let t; let i; const a = this; for (i = 0; i < a.filestack.length; i++) if (a.filestack[i] && (t = `${a.previewInitId}-${i}`, e.inArray(t, a.uploadLog) === -1)) return !1; return a.uploadAsyncCount === a.uploadLog.length }, _uploadExtra(t, i) { const a = this; const r = a._getExtraData(t, i); r.length !== 0 && e.each(r, (e, t) => { a.formdata.append(e, t) }) }, _uploadSingle(i, a) { let r; let n; let o; let l; let s; let d; let c; let p; let u; let f; let m; const v = this; const g = v.getFileStack().length; const h = new FormData(); const w = `${v.previewInitId}-${i}`; const _ = v.filestack.length > 0 || !e.isEmptyObject(v.uploadExtraData); const b = e(`#${w}`).find('.file-thumb-progress'); const C = { id: w, index: i }; v.formdata = h, v.showPreview && (n = e(`#${w}:not(.file-preview-initial)`), l = n.find('.kv-file-upload'), s = n.find('.kv-file-remove'), b.show()), g === 0 || !_ || l && l.hasClass('disabled') || v._abort(C) || (m = function (e, t) { d || v.updateStack(e, void 0), v.uploadLog.push(t), v._checkAsyncComplete() && (v.fileBatchCompleted = !0) }, o = function () { let e; let i; let a; const r = v.uploadCache; let n = 0; const o = v.cacheInitialPreview; v.fileBatchCompleted && (o && o.content && (n = o.content.length), setTimeout(() => { const l = v.getFileStack(!0).length === 0; if (v.showPreview) { if (v.previewCache.set(r.content, r.config, r.tags, r.append), n) { for (i = 0; i < r.content.length; i++)a = i + n, o.content[a] = r.content[i], o.config.length && (o.config[a] = r.config[i]), o.tags.length && (o.tags[a] = r.tags[i]); v.initialPreview = t.cleanArray(o.content), v.initialPreviewConfig = t.cleanArray(o.config), v.initialPreviewThumbTags = t.cleanArray(o.tags) } else v.initialPreview = r.content, v.initialPreviewConfig = r.config, v.initialPreviewThumbTags = r.tags; v.cacheInitialPreview = {}, v.hasInitData && (v._initPreview(), v._initPreviewActions()) }v.unlock(l), l && v._clearFileInput(), e = v.$preview.find('.file-preview-initial'), v.uploadAsync && e.length && (t.addCss(e, t.SORT_CSS), v._initSortable()), v._raise('filebatchuploadcomplete', [v.filestack, v._getExtraData()]), v.uploadCount = 0, v.uploadStatus = {}, v.uploadLog = [], v._setProgress(101), v.ajaxAborted = !1 }, 100)) }, c = function (o) { r = v._getOutData(o), v.fileBatchCompleted = !1, a || (v.ajaxAborted = !1), v.showPreview && (n.hasClass('file-preview-success') || (v._setThumbStatus(n, 'Loading'), t.addCss(n, 'file-uploading')), l.attr('disabled', !0), s.attr('disabled', !0)), a || v.lock(), v._raise('filepreupload', [r, w, i]), e.extend(!0, C, r), v._abort(C) && (o.abort(), a || (v._setThumbStatus(n, 'New'), n.removeClass('file-uploading'), l.removeAttr('disabled'), s.removeAttr('disabled'), v.unlock()), v._setProgressCancelled()) }, p = function (o, s, c) { const p = v.showPreview && n.attr('id') ? n.attr('id') : w; r = v._getOutData(c, o), e.extend(!0, C, r), setTimeout(() => { t.isEmpty(o) || t.isEmpty(o.error) ? (v.showPreview && (v._setThumbStatus(n, 'Success'), l.hide(), v._initUploadSuccess(o, n, a), v._setProgress(101, b)), v._raise('fileuploaded', [r, p, i]), a ? m(i, p) : v.updateStack(i, void 0)) : (d = !0, v._showUploadError(o.error, C), v._setPreviewError(n, i, v.filestack[i], v.retryErrorUploads), v.retryErrorUploads || l.hide(), a && m(i, p), v._setProgress(101, e(`#${p}`).find('.file-thumb-progress'), v.msgUploadError)) }, 100) }, u = function () { setTimeout(() => { v.showPreview && (l.removeAttr('disabled'), s.removeAttr('disabled'), n.removeClass('file-uploading')), a ? o() : (v.unlock(!1), v._clearFileInput()), v._initSuccessThumbs() }, 100) }, f = function (t, r, o) { const s = v.ajaxOperations.uploadThumb; const c = v._parseError(s, t, o, a && v.filestack[i].name ? v.filestack[i].name : null); d = !0, setTimeout(() => { a && m(i, w), v.uploadStatus[w] = 100, v._setPreviewError(n, i, v.filestack[i], v.retryErrorUploads), v.retryErrorUploads || l.hide(), e.extend(!0, C, v._getOutData(t)), v._setProgress(101, b, v.msgAjaxProgressError.replace('{operation}', s)), v._setProgress(101, e(`#${w}`).find('.file-thumb-progress'), v.msgUploadError), v._showUploadError(c, C) }, 100) }, h.append(v.uploadFileAttr, v.filestack[i], v.filenames[i]), h.append('file_id', i), v._ajaxSubmit(c, p, u, f, w, i)) }, _uploadBatch() { let i; let a; let r; let n; let o; const l = this; const s = l.filestack; const d = s.length; const c = {}; const p = l.filestack.length > 0 || !e.isEmptyObject(l.uploadExtraData); l.formdata = new FormData(), d !== 0 && p && !l._abort(c) && (o = function () { e.each(s, (e) => { l.updateStack(e, void 0) }), l._clearFileInput() }, i = function (i) { l.lock(); const a = l._getOutData(i); l.ajaxAborted = !1, l.showPreview && l._getThumbs().each(function () { const i = e(this); const a = i.find('.kv-file-upload'); const r = i.find('.kv-file-remove'); i.hasClass('file-preview-success') || (l._setThumbStatus(i, 'Loading'), t.addCss(i, 'file-uploading')), a.attr('disabled', !0), r.attr('disabled', !0) }), l._raise('filebatchpreupload', [a]), l._abort(a) && (i.abort(), l._getThumbs().each(function () { const t = e(this); const i = t.find('.kv-file-upload'); const a = t.find('.kv-file-remove'); t.hasClass('file-preview-loading') && (l._setThumbStatus(t, 'New'), t.removeClass('file-uploading')), i.removeAttr('disabled'), a.removeAttr('disabled') }), l._setProgressCancelled()) }, a = function (i, a, r) { const n = l._getOutData(r, i); let s = 0; const d = l._getThumbs(':not(.file-preview-success)'); const c = t.isEmpty(i) || t.isEmpty(i.errorkeys) ? [] : i.errorkeys; t.isEmpty(i) || t.isEmpty(i.error) ? (l._raise('filebatchuploadsuccess', [n]), o(), l.showPreview ? (d.each(function () { const t = e(this); l._setThumbStatus(t, 'Success'), t.removeClass('file-uploading'), t.find('.kv-file-upload').hide().removeAttr('disabled') }), l._initUploadSuccess(i)) : l.reset(), l._setProgress(101)) : (l.showPreview && (d.each(function () { const t = e(this); const i = t.attr('data-fileindex'); t.removeClass('file-uploading'), t.find('.kv-file-upload').removeAttr('disabled'), t.find('.kv-file-remove').removeAttr('disabled'), c.length === 0 || e.inArray(s, c) !== -1 ? (l._setPreviewError(t, i, l.filestack[i], l.retryErrorUploads), l.retryErrorUploads || (t.find('.kv-file-upload').hide(), l.updateStack(i, void 0))) : (t.find('.kv-file-upload').hide(), l._setThumbStatus(t, 'Success'), l.updateStack(i, void 0)), t.hasClass('file-preview-error') && !l.retryErrorUploads || s++ }), l._initUploadSuccess(i)), l._showUploadError(i.error, n, 'filebatchuploaderror'), l._setProgress(101, l.$progress, l.msgUploadError)) }, n = function () { l.unlock(), l._initSuccessThumbs(), l._clearFileInput(), l._raise('filebatchuploadcomplete', [l.filestack, l._getExtraData()]) }, r = function (t, i, a) { const r = l._getOutData(t); const n = l.ajaxOperations.uploadBatch; const o = l._parseError(n, t, a); l._showUploadError(o, r, 'filebatchuploaderror'), l.uploadFileCount = d - 1, l.showPreview && (l._getThumbs().each(function () { const t = e(this); const i = t.attr('data-fileindex'); t.removeClass('file-uploading'), void 0 !== l.filestack[i] && l._setPreviewError(t) }), l._getThumbs().removeClass('file-uploading'), l._getThumbs(' .kv-file-upload').removeAttr('disabled'), l._getThumbs(' .kv-file-delete').removeAttr('disabled'), l._setProgress(101, l.$progress, l.msgAjaxProgressError.replace('{operation}', n))) }, e.each(s, (e, i) => { t.isEmpty(s[e]) || l.formdata.append(l.uploadFileAttr, i, l.filenames[e]) }), l._ajaxSubmit(i, a, n, r)) }, _uploadExtraOnly() { let e; let i; let a; let r; const n = this; const o = {}; n.formdata = new FormData(), n._abort(o) || (e = function (e) { n.lock(); const t = n._getOutData(e); n._raise('filebatchpreupload', [t]), n._setProgress(50), o.data = t, o.xhr = e, n._abort(o) && (e.abort(), n._setProgressCancelled()) }, i = function (e, i, a) { const r = n._getOutData(a, e); t.isEmpty(e) || t.isEmpty(e.error) ? (n._raise('filebatchuploadsuccess', [r]), n._clearFileInput(), n._initUploadSuccess(e), n._setProgress(101)) : n._showUploadError(e.error, r, 'filebatchuploaderror') }, a = function () { n.unlock(), n._clearFileInput(), n._raise('filebatchuploadcomplete', [n.filestack, n._getExtraData()]) }, r = function (e, t, i) { const a = n._getOutData(e); const r = n.ajaxOperations.uploadExtra; const l = n._parseError(r, e, i); o.data = a, n._showUploadError(l, a, 'filebatchuploaderror'), n._setProgress(101, n.$progress, n.msgAjaxProgressError.replace('{operation}', r)) }, n._ajaxSubmit(e, i, a, r)) }, _deleteFileIndex(i) { const a = this; let r = i.attr('data-fileindex'); const n = a.reversePreviewOrder; r.substring(0, 5) === 'init_' && (r = parseInt(r.replace('init_', '')), a.initialPreview = t.spliceArray(a.initialPreview, r, n), a.initialPreviewConfig = t.spliceArray(a.initialPreviewConfig, r, n), a.initialPreviewThumbTags = t.spliceArray(a.initialPreviewThumbTags, r, n), a.getFrames().each(function () { const t = e(this); let i = t.attr('data-fileindex'); i.substring(0, 5) === 'init_' && (i = parseInt(i.replace('init_', '')), i > r && (i--, t.attr('data-fileindex', `init_${i}`))) }), a.uploadAsync && (a.cacheInitialPreview = a.getPreview())) }, _initFileActions() { const i = this; const a = i.$preview; i.showPreview && (i._initZoomButton(), i.getFrames(' .kv-file-remove').each(function () { let r; let n; let o; let l; const s = e(this); const d = s.closest(t.FRAMES); const c = d.attr('id'); const p = d.attr('data-fileindex'); i._handler(s, 'click', () => l = i._raise('filepreremove', [c, p]), l !== !1 && i._validateMinCount() ? (r = d.hasClass('file-preview-error'), t.cleanMemory(d), void d.fadeOut('slow', () => { t.cleanZoomCache(a.find(`#zoom-${c}`)), i.updateStack(p, void 0), i._clearObjects(d), d.remove(), c && r && i.$errorContainer.find(`li[data-file-id="${c}"]`).fadeOut('fast', function () { e(this).remove(), i._errorsExist() || i._resetErrors() }), i._clearFileInput(); const l = i.getFileStack(!0); const s = i.previewCache.count(); const u = l.length; const f = i.showPreview && i.getFrames().length; u !== 0 || s !== 0 || f ? (n = s + u, o = n > 1 ? i._getMsgSelected(n) : l[0] ? i._getFileNames()[0] : '', i._setCaption(o)) : i.reset(), i._raise('fileremoved', [c, p]) })) : !1) }), i.getFrames(' .kv-file-upload').each(function () { const a = e(this); i._handler(a, 'click', () => { const e = a.closest(t.FRAMES); const r = e.attr('data-fileindex'); i.$progress.hide(), e.hasClass('file-preview-error') && !i.retryErrorUploads || i._uploadSingle(r, !1) }) })) }, _initPreviewActions() { const i = this; const a = i.$preview; const r = i.deleteExtraData || {}; const n = `${t.FRAMES} .kv-file-remove`; const o = i.fileActionSettings; const l = o.removeClass; const s = o.removeErrorClass; const d = function () { const e = i.isAjaxUpload ? i.previewCache.count() : i._inputFileCount(); a.find(t.FRAMES).length || e || (i._setCaption(''), i.reset(), i.initialCaption = '') }; i._initZoomButton(), a.find(n).each(function () { let n; let o; let c; const p = e(this); const u = p.data('url') || i.deleteUrl; const f = p.data('key'); if (!t.isEmpty(u) && void 0 !== f) { let m; let v; let g; let h; const w = p.closest(t.FRAMES); const _ = i.previewCache.data; let b = w.attr('data-fileindex'); b = parseInt(b.replace('init_', '')), g = t.isEmpty(_.config) && t.isEmpty(_.config[b]) ? null : _.config[b], h = t.isEmpty(g) || t.isEmpty(g.extra) ? r : g.extra, typeof h === 'function' && (h = h()), v = { id: p.attr('id'), key: f, extra: h }, n = function (e) { i.ajaxAborted = !1, i._raise('filepredelete', [f, e, h]), i._abort() ? e.abort() : (p.removeClass(s), t.addCss(w, 'file-uploading'), t.addCss(p, `disabled ${l}`)) }, o = function (e, r, n) { let o, c; return t.isEmpty(e) || t.isEmpty(e.error) ? (w.removeClass('file-uploading').addClass('file-deleted'), void w.fadeOut('slow', () => { b = parseInt(w.attr('data-fileindex').replace('init_', '')), i.previewCache.unset(b), i._deleteFileIndex(w), o = i.previewCache.count(), c = o > 0 ? i._getMsgSelected(o) : '', i._setCaption(c), i._raise('filedeleted', [f, n, h]), t.cleanZoomCache(a.find(`#zoom-${w.attr('id')}`)), i._clearObjects(w), w.remove(), d() })) : (v.jqXHR = n, v.response = e, i._showError(e.error, v, 'filedeleteerror'), w.removeClass('file-uploading'), p.removeClass(`disabled ${l}`).addClass(s), void d()) }, c = function (e, t, a) { const r = i.ajaxOperations.deleteThumb; const n = i._parseError(r, e, a); v.jqXHR = e, v.response = {}, i._showError(n, v, 'filedeleteerror'), w.removeClass('file-uploading'), p.removeClass(`disabled ${l}`).addClass(s), d() }, i._initAjaxSettings(), i._mergeAjaxCallback('beforeSend', n, 'delete'), i._mergeAjaxCallback('success', o, 'delete'), i._mergeAjaxCallback('error', c, 'delete'), m = e.extend(!0, {}, { url: i._encodeURI(u), type: 'POST', dataType: 'json', data: e.extend(!0, {}, { key: f }, h) }, i._ajaxDeleteSettings), i._handler(p, 'click', () => i._validateMinCount() ? (i.ajaxAborted = !1, i._raise('filebeforedelete', [f, h]), void (i.ajaxAborted instanceof Promise ? i.ajaxAborted.then((t) => { t || e.ajax(m) }) : i.ajaxAborted || e.ajax(m))) : !1) } }) }, _hideFileIcon() { const e = this; e.overwriteInitial && e.$captionContainer.removeClass('icon-visible') }, _showFileIcon() { const e = this; t.addCss(e.$captionContainer, 'icon-visible') }, _getSize(t) { let i; let a; let r; const n = this; const o = parseFloat(t); const l = n.fileSizeGetter; return e.isNumeric(t) && e.isNumeric(o) ? (typeof l === 'function' ? r = l(o) : o === 0 ? r = '0.00 B' : (i = Math.floor(Math.log(o) / Math.log(1024)), a = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'], r = `${1 * (o / Math.pow(1024, i)).toFixed(2)} ${a[i]}`), n._getLayoutTemplate('size').replace('{sizeText}', r)) : '' }, _getFileType(e) { const t = this; return t.mimeTypeAliases[e] || e }, _generatePreviewTemplate(i, a, r, n, o, l, s, d, c, p, u) { let f; let m; const v = this; const g = v.slug(r); let h = ''; let w = ''; const _ = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth; const b = _ < 400 ? v.previewSettingsSmall[i] || v.defaults.previewSettingsSmall[i] : v.previewSettings[i] || v.defaults.previewSettings[i]; const C = c || v._renderFileFooter(g, s, 'auto', l); const y = v._getPreviewIcon(r); let x = 'type-default'; const T = y && v.preferIconicPreview; const E = y && v.preferIconicZoomPreview; return b && e.each(b, (e, t) => { w += `${e}:${t};` }), m = function (a, l, s, c) { const f = s ? `zoom-${o}` : o; let m = v._getPreviewTemplate(a); let h = `${d || ''} ${c}`; return v.frameClass && (h = `${v.frameClass} ${h}`), s && (h = h.replace(` ${t.SORT_CSS}`, '')), m = v._parseFilePreviewIcon(m, r), a === 'text' && (l = t.htmlEncode(l)), i !== 'object' || n || e.each(v.defaults.fileTypeSettings, (e, t) => { e !== 'object' && e !== 'other' && t(r, n) && (x = `type-${e}`) }), m.setTokens({ previewId: f, caption: g, frameClass: h, type: v._getFileType(n), fileindex: p, typeCss: x, footer: C, data: l, template: u || i, style: w ? `style="${w}"` : '' }) }, p = p || o.slice(o.lastIndexOf('-') + 1), v.fileActionSettings.showZoom && (h = m(E ? 'other' : i, a, !0, 'kv-zoom-thumb')), h = `\n${v._getLayoutTemplate('zoomCache').replace('{zoomContent}', h)}`, f = m(T ? 'other' : i, a, !1, 'kv-preview-thumb'), f + h }, _addToPreview(e, t) { const i = this; return i.reversePreviewOrder ? e.prepend(t) : e.append(t) }, _previewDefault(i, a, r) { const n = this; const o = n.$preview; if (n.showPreview) { let l; const s = i ? i.name : ''; const d = i ? i.type : ''; const c = i.size || 0; const p = n.slug(s); const u = r === !0 && !n.isAjaxUpload; const f = t.createObjectURL(i); n._clearDefaultPreview(), l = n._generatePreviewTemplate('other', f, s, d, a, u, c), n._addToPreview(o, l), n._setThumbAttr(a, p, c), r === !0 && n.isAjaxUpload && n._setThumbStatus(e(`#${a}`), 'Error') } }, _previewFile(e, t, i, a, r, n) { if (this.showPreview) { let o; const l = this; const s = t ? t.name : ''; const d = n.type; const c = n.name; const p = l._parseFileType(d, s); const u = l.allowedPreviewTypes; const f = l.allowedPreviewMimeTypes; const m = l.$preview; const v = t.size || 0; const g = u && u.indexOf(p) >= 0; const h = f && f.indexOf(d) !== -1; let w = p === 'text' || p === 'html' || p === 'image' ? i.target.result : r; if (p === 'html' && l.purifyHtml && window.DOMPurify && (w = window.DOMPurify.sanitize(w)), g || h) { o = l._generatePreviewTemplate(p, w, s, d, a, !1, v), l._clearDefaultPreview(), l._addToPreview(m, o); const _ = m.find(`#${a} img`); l._validateImageOrientation(_, t, a, c, d, v, w) } else l._previewDefault(t, a); l._setThumbAttr(a, c, v), l._initSortable() } }, _setThumbAttr(t, i, a) { const r = this; const n = e(`#${t}`); n.length && (a = a && a > 0 ? r._getSize(a) : '', n.data({ caption: i, size: a })) }, _setInitThumbAttr() { let e; let i; let a; let r; const n = this; const o = n.previewCache.data; const l = n.previewCache.count(); if (l !== 0) for (let s = 0; l > s; s++)e = o.config[s], r = `${n.previewInitId}-init_${s}`, i = t.ifSet('caption', e, t.ifSet('filename', e)), a = t.ifSet('size', e), n._setThumbAttr(r, i, a) }, _slugDefault(e) { return t.isEmpty(e) ? '' : String(e).replace(/[\[\]\/\{}:;#%=\(\)\*\+\?\\\^\$\|<>&"']/g, '_') }, _updateFileDetails(e) { const i = this; const a = i.$element; const r = i.getFileStack(); const n = t.isIE(9) && t.findFileName(a.val()) || a[0].files[0] && a[0].files[0].name || r.length && r[0].name || ''; const o = i.slug(n); const l = i.isAjaxUpload ? r.length : e; const s = i.previewCache.count() + l; const d = l === 1 ? o : i._getMsgSelected(s); i.isError ? (i.$previewContainer.removeClass('file-thumb-loading'), i.$previewStatus.html(''), i.$captionContainer.removeClass('icon-visible')) : i._showFileIcon(), i._setCaption(d, i.isError), i.$container.removeClass('file-input-new file-input-ajax-new'), arguments.length === 1 && i._raise('fileselect', [e, o]), i.previewCache.count() && i._initPreviewActions() }, _setThumbStatus(e, t) { const i = this; if (i.showPreview) { const a = `indicator${t}`; const r = `${a}Title`; const n = `file-preview-${t.toLowerCase()}`; const o = e.find('.file-upload-indicator'); const l = i.fileActionSettings; e.removeClass('file-preview-success file-preview-error file-preview-loading'), t === 'Success' && e.find('.file-drag-handle').remove(), o.html(l[a]), o.attr('title', l[r]), e.addClass(n), t !== 'Error' || i.retryErrorUploads || e.find('.kv-file-upload').attr('disabled', !0) } }, _setProgressCancelled() { const e = this; e._setProgress(101, e.$progress, e.msgCancelled) }, _setProgress(e, i, a) { let r; const n = this; const o = Math.min(e, 100); const l = n.progressUploadThreshold; const s = e <= 100 ? n.progressTemplate : n.progressCompleteTemplate; const d = o < 100 ? n.progressTemplate : a ? n.progressErrorTemplate : s; i = i || n.$progress, t.isEmpty(d) || (r = l && o > l && e <= 100 ? d.setTokens({ percent: l, status: n.msgUploadThreshold }) : d.setTokens({ percent: o, status: e > 100 ? n.msgUploadEnd : `${o}%` }), i.html(r), a && i.find('[role="progressbar"]').html(a)) }, _setFileDropZoneTitle() { let e; const i = this; const a = i.$container.find('.file-drop-zone'); let r = i.dropZoneTitle; i.isClickable && (e = t.isEmpty(i.$element.attr('multiple')) ? i.fileSingle : i.filePlural, r += i.dropZoneClickTitle.replace('{files}', e)), a.find(`.${i.dropZoneTitleClass}`).remove(), !i.showPreview || a.length === 0 || i.getFileStack().length > 0 || !i.dropZoneEnabled || !i.isAjaxUpload && i.$element.files || (a.find(t.FRAMES).length === 0 && t.isEmpty(i.defaultPreviewContent) && a.prepend(`<div class="${i.dropZoneTitleClass}">${r}</div>`), i.$container.removeClass('file-input-new'), t.addCss(i.$container, 'file-input-ajax-new')) }, _setAsyncUploadStatus(t, i, a) { const r = this; let n = 0; r._setProgress(i, e(`#${t}`).find('.file-thumb-progress')), r.uploadStatus[t] = i, e.each(r.uploadStatus, (e, t) => { n += t }), r._setProgress(Math.floor(n / a)) }, _validateMinCount() { const e = this; const t = e.isAjaxUpload ? e.getFileStack().length : e._inputFileCount(); return e.validateInitialCount && e.minFileCount > 0 && e._getFileCount(t - 1) < e.minFileCount ? (e._noFilesError({}), !1) : !0 }, _getFileCount(e) { const t = this; let i = 0; return t.validateInitialCount && !t.overwriteInitial && (i = t.previewCache.count(), e += i), e }, _getFileId(e) { let t; const i = this; const a = i.generateFileId; return typeof a === 'function' ? a(e, event) : e ? (t = String(e.webkitRelativePath || e.fileName || e.name || null), t ? `${e.size}-${t.replace(/[^0-9a-zA-Z_-]/gim, '')}` : null) : null }, _getFileName(e) { return e && e.name ? this.slug(e.name) : void 0 }, _getFileIds(e) { const t = this; return t.fileids.filter((t) => e ? void 0 !== t : void 0 !== t && t !== null) }, _getFileNames(e) { const t = this; return t.filenames.filter((t) => e ? void 0 !== t : void 0 !== t && t !== null) }, _setPreviewError(e, t, i, a) { const r = this; if (void 0 !== t && r.updateStack(t, i), r.showPreview) { if (r.removeFromPreviewOnError && !a) return void e.remove(); r._setThumbStatus(e, 'Error'), r._refreshUploadButton(e, a) } }, _refreshUploadButton(e, t) { const i = this; const a = e.find('.kv-file-upload'); const r = i.fileActionSettings; let n = r.uploadIcon; let o = r.uploadTitle; a.length && (t && (n = r.uploadRetryIcon, o = r.uploadRetryTitle), a.attr('title', o).html(n)) }, _checkDimensions(e, i, a, r, n, o, l) { let s; let d; let c; let p; const u = this; const f = i === 'Small' ? 'min' : 'max'; const m = u[`${f}Image${o}`]; !t.isEmpty(m) && a.length && (c = a[0], d = o === 'Width' ? c.naturalWidth || c.width : c.naturalHeight || c.height, p = i === 'Small' ? d >= m : m >= d, p || (s = u[`msgImage${o}${i}`].setTokens({ name: n, size: m }), u._showUploadError(s, l), u._setPreviewError(r, e, null))) }, _getExifObj(e) { const t = this; let i = null; try { i = window.piexif ? window.piexif.load(e) : null } catch (a) { i = null } return i || t._log('Error loading the piexif.js library.'), i }, _validateImageOrientation(e, i, a, r, n, o, l) { let s; let d; const c = this; return s = e.length && c.autoOrientImage ? c._getExifObj(l) : null, (d = s ? s['0th'][piexif.ImageIFD.Orientation] : null) ? (t.setImageOrientation(e, c.$preview.find(`#zoom-${a} img`), d), c._raise('fileimageoriented', { $img: e, file: i }), void c._validateImage(a, r, n, o, l, s)) : void c._validateImage(a, r, n, o, l, s) }, _validateImage(t, i, a, r, n, o) { let l; let s; let d; const c = this; const p = c.$preview; const u = p.find(`#${t}`); const f = u.attr('data-fileindex'); const m = u.find('img'); i = i || 'Untitled', m.one('load', () => { s = u.width(), d = p.width(), s > d && m.css('width', '100%'), l = { ind: f, id: t }, c._checkDimensions(f, 'Small', m, u, i, 'Width', l), c._checkDimensions(f, 'Small', m, u, i, 'Height', l), c.resizeImage || (c._checkDimensions(f, 'Large', m, u, i, 'Width', l), c._checkDimensions(f, 'Large', m, u, i, 'Height', l)), c._raise('fileimageloaded', [t]), c.loadedImages.push({ ind: f, img: m, thumb: u, pid: t, typ: a, siz: r, validated: !1, imgData: n, exifObj: o }), u.data('exif', o), c._validateAllImages() }).one('error', () => { c._raise('fileimageloaderror', [t]) }).each(function () { this.complete ? e(this).trigger('load') : this.error && e(this).trigger('error') }) }, _validateAllImages() { let e; let t; let i; const a = this; const r = { val: 0 }; const n = a.loadedImages.length; const o = a.resizeIfSizeMoreThan; if (n === a.totalImagesCount && (a._raise('fileimagesloaded'), a.resizeImage)) for (e = 0; e < a.loadedImages.length; e++)t = a.loadedImages[e], t.validated || (i = t.siz, i && i > 1e3 * o && a._getResizedImage(t, r, n), a.loadedImages[e].validated = !0) }, _getResizedImage(i, a, r) { let n; let o; let l; let s; let d; let c; let p; const u = this; const f = e(i.img)[0]; let m = f.naturalWidth; let v = f.naturalHeight; let g = 1; const h = u.maxImageWidth || m; const w = u.maxImageHeight || v; const _ = !(!m || !v); const b = u.imageCanvas; const C = u.imageCanvasContext; let y = i.typ; const x = i.pid; const T = i.ind; const E = i.thumb; const S = i.exifObj; if (d = function (e, t, i) { u.isAjaxUpload ? u._showUploadError(e, t, i) : u._showError(e, t, i), u._setPreviewError(E, T) }, (!u.filestack[T] || !_ || h >= m && w >= v) && (_ && u.filestack[T] && u._raise('fileimageresized', [x, T]), a.val++, a.val === r && u._raise('fileimagesresized'), !_)) return void d(u.msgImageResizeError, { id: x, index: T }, 'fileimageresizeerror'); y = y || u.resizeDefaultImageType, o = m > h, l = v > w, g = u.resizePreference === 'width' ? o ? h / m : l ? w / v : 1 : l ? w / v : o ? h / m : 1, u._resetCanvas(), m *= g, v *= g, b.width = m, b.height = v; try { C.drawImage(f, 0, 0, m, v), s = b.toDataURL(y, u.resizeQuality), S && (p = window.piexif.dump(S), s = window.piexif.insert(p, s)), n = t.dataURI2Blob(s), u.filestack[T] = n, u._raise('fileimageresized', [x, T]), a.val++, a.val === r && u._raise('fileimagesresized', [void 0, void 0]), n instanceof Blob || d(u.msgImageResizeError, { id: x, index: T }, 'fileimageresizeerror') } catch (k) { a.val++, a.val === r && u._raise('fileimagesresized', [void 0, void 0]), c = u.msgImageResizeException.replace('{errors}', k.message), d(c, { id: x, index: T }, 'fileimageresizeexception') } }, _initBrowse(e) { const i = this; const a = i.$element; i.showBrowse ? i.$btnFile = e.find('.btn-file').append(a) : (a.appendTo(e).attr('tabindex', -1), t.addCss(a, 'file-no-browse')) }, _initClickable() { let i; let a; const r = this; r.isClickable && (i = r.$dropZone, r.isAjaxUpload || (a = r.$preview.find('.file-default-preview'), a.length && (i = a)), t.addCss(i, 'clickable'), i.attr('tabindex', -1), r._handler(i, 'click', (t) => { const a = e(t.target); e(`${r.elErrorContainer}:visible`).length || a.parents('.file-preview-thumbnails').length && !a.parents('.file-default-preview').length || (r.$element.data('zoneClicked', !0).trigger('click'), i.blur()) })) }, _initCaption() { const e = this; const i = e.initialCaption || ''; return e.overwriteInitial || t.isEmpty(i) ? (e.$caption.val(''), !1) : (e._setCaption(i), !0) }, _setCaption(i, a) { let r; let n; let o; let l; let s; const d = this; const c = d.getFileStack(); if (d.$caption.length) { if (d.$captionContainer.removeClass('icon-visible'), a)r = e(`<div>${d.msgValidationError}</div>`).text(), l = c.length, s = l ? l === 1 && c[0] ? d._getFileNames()[0] : d._getMsgSelected(l) : d._getMsgSelected(d.msgNo), n = t.isEmpty(i) ? s : i, o = `<span class="${d.msgValidationErrorClass}">${d.msgValidationErrorIcon}</span>`; else { if (t.isEmpty(i)) return; r = e(`<div>${i}</div>`).text(), n = r, o = d._getLayoutTemplate('fileIcon') }d.$captionContainer.addClass('icon-visible'), d.$caption.attr('title', r).val(n), d.$captionIcon.html(o) } }, _createContainer() { const t = this; const i = { class: `file-input file-input-new${t.rtl ? ' kv-rtl' : ''}` }; const a = e(document.createElement('div')).attr(i).html(t._renderMain()); return a.insertBefore(t.$element), t._initBrowse(a), t.theme && a.addClass(`theme-${t.theme}`), a }, _refreshContainer() { const e = this; const t = e.$container; const i = e.$element; i.insertAfter(t), t.html(e._renderMain()), e._initBrowse(t), e._validateDisabled() }, _validateDisabled() { const e = this; e.$caption.attr({ readonly: e.isDisabled }) }, _renderMain() { const e = this; const t = e.dropZoneEnabled ? ' file-drop-zone' : 'file-drop-disabled'; const i = e.showClose ? e._getLayoutTemplate('close') : ''; const a = e.showPreview ? e._getLayoutTemplate('preview').setTokens({ class: e.previewClass, dropClass: t }) : ''; const r = e.isDisabled ? `${e.captionClass} file-caption-disabled` : e.captionClass; const n = e.captionTemplate.setTokens({ class: `${r} kv-fileinput-caption` }); return e.mainTemplate.setTokens({ class: e.mainClass + (!e.showBrowse && e.showCaption ? ' no-browse' : ''), preview: a, close: i, caption: n, upload: e._renderButton('upload'), remove: e._renderButton('remove'), cancel: e._renderButton('cancel'), browse: e._renderButton('browse') }) }, _renderButton(e) { const i = this; let a = i._getLayoutTemplate('btnDefault'); let r = i[`${e}Class`]; const n = i[`${e}Title`]; const o = i[`${e}Icon`]; let l = i[`${e}Label`]; const s = i.isDisabled ? ' disabled' : ''; let d = 'button'; switch (e) { case 'remove':if (!i.showRemove) return ''; break; case 'cancel':if (!i.showCancel) return ''; r += ' kv-hidden'; break; case 'upload':if (!i.showUpload) return ''; i.isAjaxUpload && !i.isDisabled ? a = i._getLayoutTemplate('btnLink').replace('{href}', i.uploadUrl) : d = 'submit'; break; case 'browse':if (!i.showBrowse) return ''; a = i._getLayoutTemplate('btnBrowse'); break; default:return '' } return r += e === 'browse' ? ' btn-file' : ` fileinput-${e} fileinput-${e}-button`, t.isEmpty(l) || (l = ` <span class="${i.buttonLabelClass}">${l}</span>`), a.setTokens({ type: d, css: r, title: n, status: s, icon: o, label: l }) }, _renderThumbProgress() { const e = this; return `<div class="file-thumb-progress kv-hidden">${e.progressTemplate.setTokens({ percent: '0', status: e.msgUploadBegin })}</div>` }, _renderFileFooter(e, i, a, r) { let n; const o = this; const l = o.fileActionSettings; const s = l.showRemove; const d = l.showDrag; const c = l.showUpload; const p = l.showZoom; const u = o._getLayoutTemplate('footer'); const f = o._getLayoutTemplate('indicator'); const m = r ? l.indicatorError : l.indicatorNew; const v = r ? l.indicatorErrorTitle : l.indicatorNewTitle; const g = f.setTokens({ indicator: m, indicatorTitle: v }); return i = o._getSize(i), n = o.isAjaxUpload ? u.setTokens({ actions: o._renderFileActions(c, !1, s, p, d, !1, !1, !1), caption: e, size: i, width: a, progress: o._renderThumbProgress(), indicator: g }) : u.setTokens({ actions: o._renderFileActions(!1, !1, !1, p, d, !1, !1, !1), caption: e, size: i, width: a, progress: '', indicator: g }), n = t.replaceTags(n, o.previewThumbTags) }, _renderFileActions(e, t, i, a, r, n, o, l, s, d, c) { if (!(e || t || i || a || r)) return ''; let p; const u = this; const f = o === !1 ? '' : ` data-url="${o}"`; const m = l === !1 ? '' : ` data-key="${l}"`; let v = ''; let g = ''; let h = ''; let w = ''; let _ = ''; const b = u._getLayoutTemplate('actions'); const C = u.fileActionSettings; const y = u.otherActionButtons.setTokens({ dataKey: m, key: l }); const x = n ? `${C.removeClass} disabled` : C.removeClass; return i && (v = u._getLayoutTemplate('actionDelete').setTokens({ removeClass: x, removeIcon: C.removeIcon, removeTitle: C.removeTitle, dataUrl: f, dataKey: m, key: l })), e && (g = u._getLayoutTemplate('actionUpload').setTokens({ uploadClass: C.uploadClass, uploadIcon: C.uploadIcon, uploadTitle: C.uploadTitle })), t && (h = u._getLayoutTemplate('actionDownload').setTokens({ downloadClass: C.downloadClass, downloadIcon: C.downloadIcon, downloadTitle: C.downloadTitle, downloadUrl: d || u.initialPreviewDownloadUrl }), h = h.setTokens({ filename: c, key: l })), a && (w = u._getLayoutTemplate('actionZoom').setTokens({ zoomClass: C.zoomClass, zoomIcon: C.zoomIcon, zoomTitle: C.zoomTitle })), r && s && (p = `drag-handle-init ${C.dragClass}`, _ = u._getLayoutTemplate('actionDrag').setTokens({ dragClass: p, dragTitle: C.dragTitle, dragIcon: C.dragIcon })), b.setTokens({ delete: v, upload: g, download: h, zoom: w, drag: _, other: y }) }, _browse(e) { const t = this; e && e.isDefaultPrevented() || !t._raise('filebrowse') || (t.isError && !t.isAjaxUpload && t.clear(), t.$captionContainer.focus()) }, _filterDuplicate(e, t, i) { const a = this; const r = a._getFileId(e); r && i && i.indexOf(r) > -1 || (i || (i = []), t.push(e), i.push(r)) }, _change(i) { const a = this; if (!a.changeTriggered) { let r; let n; const o = a.$element; const l = arguments.length > 1; const s = a.isAjaxUpload; let d = []; let c = l ? arguments[1] : o.get(0).files; const p = !s && t.isEmpty(o.attr('multiple')) ? 1 : a.maxFileCount; const u = a.filestack.length; const f = t.isEmpty(o.attr('multiple')); const m = f && u > 0; const v = a._getFileIds(); const g = function (t, i, r, n) { const o = e.extend(!0, {}, a._getOutData({}, {}, c), { id: r, index: n }); const l = { id: r, index: n, file: i, files: c }; return s ? a._showUploadError(t, o) : a._showError(t, l) }; const h = function (e, t) { const i = a.msgFilesTooMany.replace('{m}', t).replace('{n}', e); a.isError = g(i, null, null, null), a.$captionContainer.removeClass('icon-visible'), a._setCaption('', !0), a.$container.removeClass('file-input-new file-input-ajax-new') }; if (a.reader = null, a._resetUpload(), a._hideFileIcon(), a.dropZoneEnabled && a.$container.find(`.file-drop-zone .${a.dropZoneTitleClass}`).remove(), s ? e.each(c, (e, t) => { a._filterDuplicate(t, d, v) }) : (c = i.target && void 0 === i.target.files ? i.target.value ? [{ name: i.target.value.replace(/^.+\\/, '') }] : [] : i.target.files || {}, d = c), t.isEmpty(d) || d.length === 0) return s || a.clear(), void a._raise('fileselectnone'); if (a._resetErrors(), n = d.length, r = a._getFileCount(s ? a.getFileStack().length + n : n), p > 0 && r > p) { if (!a.autoReplace || n > p) return void h(a.autoReplace && n > p ? n : r, p); r > p && a._resetPreviewThumbs(s) } else !s || m ? (a._resetPreviewThumbs(!1), m && a.clearStack()) : !s || u !== 0 || a.previewCache.count() && !a.overwriteInitial || a._resetPreviewThumbs(!0); a.isPreviewable ? a.readFiles(d) : a._updateFileDetails(1) } }, _abort(t) { let i; const a = this; return a.ajaxAborted && typeof a.ajaxAborted === 'object' && void 0 !== a.ajaxAborted.message ? (i = e.extend(!0, {}, a._getOutData(), t), i.abortData = a.ajaxAborted.data || {}, i.abortMessage = a.ajaxAborted.message, a._setProgress(101, a.$progress, a.msgCancelled), a._showUploadError(a.ajaxAborted.message, i, 'filecustomerror'), a.cancel(), !0) : !!a.ajaxAborted }, _resetFileStack() { const i = this; let a = 0; const r = []; const n = []; const o = []; i._getThumbs().each(function () { const l = e(this); const s = l.attr('data-fileindex'); const d = i.filestack[s]; const c = l.attr('id'); s !== '-1' && s !== -1 && (void 0 !== d ? (r[a] = d, n[a] = i._getFileName(d), o[a] = i._getFileId(d), l.attr({ id: `${i.previewInitId}-${a}`, 'data-fileindex': a }), a++) : l.attr({ id: `uploaded-${t.uniqId()}`, 'data-fileindex': '-1' }), i.$preview.find(`#zoom-${c}`).attr({ id: `zoom-${l.attr('id')}`, 'data-fileindex': l.attr('data-fileindex') })) }), i.filestack = r, i.filenames = n, i.fileids = o }, _isFileSelectionValid(e) { const t = this; return e = e || 0, t.required && !t.getFilesCount() ? (t.$errorContainer.html(''), t._showUploadError(t.msgFileRequired), !1) : t.minFileCount > 0 && t._getFileCount(e) < t.minFileCount ? (t._noFilesError({}), !1) : !0 }, clearStack() { const e = this; return e.filestack = [], e.filenames = [], e.fileids = [], e.$element }, updateStack(e, t) { const i = this; return i.filestack[e] = t, i.filenames[e] = i._getFileName(t), i.fileids[e] = t && i._getFileId(t) || null, i.$element }, addToStack(e) { const t = this; return t.filestack.push(e), t.filenames.push(t._getFileName(e)), t.fileids.push(t._getFileId(e)), t.$element }, getFileStack(e) { const t = this; return t.filestack.filter((t) => e ? void 0 !== t : void 0 !== t && t !== null) }, getFilesCount() { const e = this; const t = e.isAjaxUpload ? e.getFileStack().length : e._inputFileCount(); return e._getFileCount(t) }, readFiles(i) { this.reader = new FileReader(); let a; const r = this; const n = r.$element; const o = r.$preview; const l = r.reader; const s = r.$previewContainer; const d = r.$previewStatus; const c = r.msgLoading; const p = r.msgProgress; const u = r.previewInitId; let f = i.length; const m = r.fileTypeSettings; const v = r.filestack.length; const g = r.allowedFileTypes; const h = g ? g.length : 0; const w = r.allowedFileExtensions; const _ = t.isEmpty(w) ? '' : w.join(', '); const b = r.maxFilePreviewSize && parseFloat(r.maxFilePreviewSize); const C = o.length && (!b || isNaN(b)); const y = function (t, n, o, l) { let s; const d = e.extend(!0, {}, r._getOutData({}, {}, i), { id: o, index: l }); const c = { id: o, index: l, file: n, files: i }; r._previewDefault(n, o, !0), r.isAjaxUpload ? (r.addToStack(void 0), setTimeout(() => { a(l + 1) }, 100)) : f = 0, r._initFileActions(), s = e(`#${o}`), s.find('.kv-file-upload').hide(), r.removeFromPreviewOnError && s.remove(), r.isError = r.isAjaxUpload ? r._showUploadError(t, d) : r._showError(t, c), r._updateFileDetails(f) }; r.loadedImages = [], r.totalImagesCount = 0, e.each(i, (e, t) => { const i = r.fileTypeSettings.image; i && i(t.type) && r.totalImagesCount++ }), a = function (x) { if (t.isEmpty(n.attr('multiple')) && (f = 1), x >= f) return r.isAjaxUpload && r.filestack.length > 0 ? r._raise('filebatchselected', [r.getFileStack()]) : r._raise('filebatchselected', [i]), s.removeClass('file-thumb-loading'), void d.html(''); let T; let E; let S; let k; let F; let P; let I; let A; let D; let z; let $; let j; const U = v + x; const R = `${u}-${U}`; const B = i[x]; const O = m.text; const L = m.image; const M = m.html; const Z = B && B.name ? r.slug(B.name) : ''; const N = (B && B.size || 0) / 1e3; let H = ''; const q = t.createObjectURL(B); let W = 0; let V = ''; let K = 0; const Y = function () { const e = p.setTokens({ index: x + 1, files: f, percent: 50, name: Z }); setTimeout(() => { d.html(e), r._updateFileDetails(f), a(x + 1) }, 100), r._raise('fileloaded', [B, R, x, l]) }; if (B) { if (h > 0) for (E = 0; h > E; E++)P = g[E], I = r.msgFileTypes[P] || P, V += E === 0 ? I : `, ${I}`; if (Z === !1) return void a(x + 1); if (Z.length === 0) return S = r.msgInvalidFileName.replace('{name}', t.htmlEncode(B.name, '[unknown]')), void y(S, B, R, x); if (t.isEmpty(w) || (H = new RegExp(`\\.(${w.join('|')})$`, 'i')), T = N.toFixed(2), r.maxFileSize > 0 && N > r.maxFileSize) return S = r.msgSizeTooLarge.setTokens({ name: Z, size: T, maxSize: r.maxFileSize }), void y(S, B, R, x); if (r.minFileSize !== null && N <= t.getNum(r.minFileSize)) return S = r.msgSizeTooSmall.setTokens({ name: Z, size: T, minSize: r.minFileSize }), void y(S, B, R, x); if (!t.isEmpty(g) && t.isArray(g)) { for (E = 0; E < g.length; E += 1)k = g[E], A = m[k], W += A && typeof A === 'function' && A(B.type, B.name) ? 1 : 0; if (W === 0) return S = r.msgInvalidFileType.setTokens({ name: Z, types: V }), void y(S, B, R, x) } if (W === 0 && !t.isEmpty(w) && t.isArray(w) && !t.isEmpty(H) && (F = t.compare(Z, H), W += t.isEmpty(F) ? 0 : F.length, W === 0)) return S = r.msgInvalidFileExtension.setTokens({ name: Z, extensions: _ }), void y(S, B, R, x); if (!r.showPreview) return r.isAjaxUpload && r.addToStack(B), setTimeout(() => { a(x + 1), r._updateFileDetails(f) }, 100), void r._raise('fileloaded', [B, R, x, l]); if (!C && N > b) return r.addToStack(B), s.addClass('file-thumb-loading'), r._previewDefault(B, R), r._initFileActions(), r._updateFileDetails(f), void a(x + 1); o.length && void 0 !== FileReader ? (D = O(B.type, Z), z = M(B.type, Z), $ = L(B.type, Z), d.html(c.replace('{index}', x + 1).replace('{files}', f)), s.addClass('file-thumb-loading'), l.onerror = function (e) { r._errorHandler(e, Z) }, l.onload = function (i) { let a; let n; let o; let s; let d; let c; const p = []; const u = function (e) { const t = new FileReader(); t.onerror = function (e) { r._errorHandler(e, Z) }, t.onload = function (e) { r._previewFile(x, B, e, R, q, n), r._initFileActions(), Y() }, e ? t.readAsText(B, r.textEncoding) : t.readAsDataURL(B) }; if (n = { name: Z, type: B.type }, e.each(m, (e, t) => { e !== 'object' && e !== 'other' && typeof t === 'function' && t(B.type, Z) && K++ }), K === 0) { for (o = new Uint8Array(i.target.result), E = 0; E < o.length; E++)s = o[E].toString(16), p.push(s); if (a = p.join('').toLowerCase().substring(0, 8), c = t.getMimeType(a, '', ''), t.isEmpty(c) && (d = t.arrayBuffer2String(l.result), c = t.isSvg(d) ? 'image/svg+xml' : t.getMimeType(a, d, B.type)), n = { name: Z, type: c }, D = O(c, ''), z = M(c, ''), $ = L(c, ''), j = D || z, j || $) return void u(j) }r._previewFile(x, B, i, R, q, n), r._initFileActions(), Y() }, l.onprogress = function (e) { if (e.lengthComputable) { const t = e.loaded / e.total * 100; const i = Math.ceil(t); S = p.setTokens({ index: x + 1, files: f, percent: i, name: Z }), setTimeout(() => { d.html(S) }, 100) } }, D || z ? l.readAsText(B, r.textEncoding) : $ ? l.readAsDataURL(B) : l.readAsArrayBuffer(B)) : (r._previewDefault(B, R), setTimeout(() => { a(x + 1), r._updateFileDetails(f) }, 100), r._raise('fileloaded', [B, R, x, l])), r.addToStack(B) } }, a(0), r._updateFileDetails(f, !1) }, lock() { const e = this; return e._resetErrors(), e.disable(), e.showRemove && e.$container.find('.fileinput-remove').hide(), e.showCancel && e.$container.find('.fileinput-cancel').show(), e._raise('filelock', [e.filestack, e._getExtraData()]), e.$element }, unlock(e) { const t = this; return void 0 === e && (e = !0), t.enable(), t.showCancel && t.$container.find('.fileinput-cancel').hide(), t.showRemove && t.$container.find('.fileinput-remove').show(), e && t._resetFileStack(), t._raise('fileunlock', [t.filestack, t._getExtraData()]), t.$element }, cancel() { let t; const i = this; const a = i.ajaxRequests; const r = a.length; if (r > 0) for (t = 0; r > t; t += 1)i.cancelling = !0, a[t].abort(); return i._setProgressCancelled(), i._getThumbs().each(function () { const t = e(this); const a = t.attr('data-fileindex'); t.removeClass('file-uploading'), void 0 !== i.filestack[a] && (t.find('.kv-file-upload').removeClass('disabled').removeAttr('disabled'), t.find('.kv-file-remove').removeClass('disabled').removeAttr('disabled')), i.unlock() }), i.$element }, clear() { let i; const a = this; if (a._raise('fileclear')) return a.$btnUpload.removeAttr('disabled'), a._getThumbs().find('video,audio,img').each(function () { t.cleanMemory(e(this)) }), a._clearFileInput(), a._resetUpload(), a.clearStack(), a._resetErrors(!0), a._hasInitialPreview() ? (a._showFileIcon(), a._resetPreview(), a._initPreviewActions(), a.$container.removeClass('file-input-new')) : (a._getThumbs().each(function () { a._clearObjects(e(this)) }), a.isAjaxUpload && (a.previewCache.data = {}), a.$preview.html(''), i = !a.overwriteInitial && a.initialCaption.length > 0 ? a.initialCaption : '', a.$caption.attr('title', '').val(i), t.addCss(a.$container, 'file-input-new'), a._validateDefaultPreview()), a.$container.find(t.FRAMES).length === 0 && (a._initCaption() || a.$captionContainer.removeClass('icon-visible')), a._hideFileIcon(), a._raise('filecleared'), a.$captionContainer.focus(), a._setFileDropZoneTitle(), a.$element }, reset() { const e = this; if (e._raise('filereset')) return e._resetPreview(), e.$container.find('.fileinput-filename').text(''), t.addCss(e.$container, 'file-input-new'), (e.getFrames().length || e.dropZoneEnabled) && e.$container.removeClass('file-input-new'), e.clearStack(), e.formdata = {}, e._setFileDropZoneTitle(), e.$element }, disable() { const e = this; return e.isDisabled = !0, e._raise('filedisabled'), e.$element.attr('disabled', 'disabled'), e.$container.find('.kv-fileinput-caption').addClass('file-caption-disabled'), e.$container.find('.fileinput-remove, .fileinput-upload, .file-preview-frame button').attr('disabled', !0), t.addCss(e.$container.find('.btn-file'), 'disabled'), e._initDragDrop(), e.$element }, enable() { const e = this; return e.isDisabled = !1, e._raise('fileenabled'), e.$element.removeAttr('disabled'), e.$container.find('.kv-fileinput-caption').removeClass('file-caption-disabled'), e.$container.find('.fileinput-remove, .fileinput-upload, .file-preview-frame button').removeAttr('disabled'), e.$container.find('.btn-file').removeClass('disabled'), e._initDragDrop(), e.$element }, upload() { let i; let a; let r; const n = this; const o = n.getFileStack().length; const l = !e.isEmptyObject(n._getExtraData()); if (n.isAjaxUpload && !n.isDisabled && n._isFileSelectionValid(o)) { if (n._resetUpload(), o === 0 && !l) return void n._showUploadError(n.msgUploadEmpty); if (n.$progress.show(), n.uploadCount = 0, n.uploadStatus = {}, n.uploadLog = [], n.lock(), n._setProgress(2), o === 0 && l) return void n._uploadExtraOnly(); if (r = n.filestack.length, n.hasInitData = !1, !n.uploadAsync) return n._uploadBatch(), n.$element; for (a = n._getOutData(), n._raise('filebatchpreupload', [a]), n.fileBatchCompleted = !1, n.uploadCache = { content: [], config: [], tags: [], append: !0 }, n.uploadAsyncCount = n.getFileStack().length, i = 0; r > i; i++)n.uploadCache.content[i] = null, n.uploadCache.config[i] = null, n.uploadCache.tags[i] = null; for (n.$preview.find('.file-preview-initial').removeClass(t.SORT_CSS), n._initSortable(), n.cacheInitialPreview = n.getPreview(), i = 0; r > i; i++)n.filestack[i] && n._uploadSingle(i, !0) } }, destroy() { const t = this; const i = t.$form; const a = t.$container; const r = t.$element; const n = t.namespace; return e(document).off(n), e(window).off(n), i && i.length && i.off(n), t.isAjaxUpload && t._clearFileInput(), t._cleanup(), t._initPreviewCache(), r.insertBefore(a).off(n).removeData(), a.off().remove(), r }, refresh(i) { const a = this; const r = a.$element; return i = typeof i !== 'object' || t.isEmpty(i) ? a.options : e.extend(!0, {}, a.options, i), a._init(i, !0), a._listen(), r }, zoom(e) { const i = this; const a = i._getFrame(e); const r = i.$modal; a && (t.initModal(r), r.html(i._getModalContent()), i._setZoomContent(a), r.modal('show'), i._initZoomButtons()) }, getExif(e) { const t = this; const i = t._getFrame(e); return i && i.data('exif') || null }, getFrames(i) { let a; const r = this; return i = i || '', a = r.$preview.find(t.FRAMES + i), r.reversePreviewOrder && (a = e(a.get().reverse())), a }, getPreview() { const e = this; return { content: e.initialPreview, config: e.initialPreviewConfig, tags: e.initialPreviewThumbTags } } }, e.fn.fileinput = function (a) { if (t.hasFileAPISupport() || t.isIE(9)) { const r = Array.apply(null, arguments); const n = []; switch (r.shift(), this.each(function () { let o; const l = e(this); let s = l.data('fileinput'); const d = typeof a === 'object' && a; const c = d.theme || l.data('theme'); let p = {}; let u = {}; const f = d.language || l.data('language') || e.fn.fileinput.defaults.language || 'en'; s || (c && (u = e.fn.fileinputThemes[c] || {}), f === 'en' || t.isEmpty(e.fn.fileinputLocales[f]) || (p = e.fn.fileinputLocales[f] || {}), o = e.extend(!0, {}, e.fn.fileinput.defaults, u, e.fn.fileinputLocales.en, p, d, l.data()), s = new i(this, o), l.data('fileinput', s)), typeof a === 'string' && n.push(s[a].apply(s, r)) }), n.length) { case 0:return this; case 1:return n[0]; default:return n } } }, e.fn.fileinput.defaults = { language: 'en', showCaption: !0, showBrowse: !0, showPreview: !0, showRemove: !0, showUpload: !0, showCancel: !0, showClose: !0, showUploadedThumbs: !0, browseOnZoneClick: !1, autoReplace: !1, autoOrientImage: !1, required: !1, rtl: !1, hideThumbnailContent: !1, encodeUrl: !0, generateFileId: null, previewClass: '', captionClass: '', frameClass: 'krajee-default', mainClass: 'file-caption-main', mainTemplate: null, purifyHtml: !0, fileSizeGetter: null, initialCaption: '', initialPreview: [], initialPreviewDelimiter: '*$$*', initialPreviewAsData: !1, initialPreviewFileType: 'image', initialPreviewConfig: [], initialPreviewThumbTags: [], previewThumbTags: {}, initialPreviewShowDelete: !0, initialPreviewDownloadUrl: '', removeFromPreviewOnError: !1, deleteUrl: '', deleteExtraData: {}, overwriteInitial: !0, previewZoomButtonIcons: { prev: '<i class="icon-triangle-left"></i>', next: '<i class="icon-triangle-right"></i>', toggleheader: '<i class="icon-resize-vertical"></i>', fullscreen: '<i class="icon-fullscreen"></i>', borderless: '<i class="icon-resize-full"></i>', close: '<i class="icon-remove"></i>' }, previewZoomButtonClasses: { prev: 'btn btn-navigate', next: 'btn btn-navigate', toggleheader: 'btn btn-sm btn-kv btn-default btn-outline-secondary', fullscreen: 'btn btn-sm btn-kv btn-default btn-outline-secondary', borderless: 'btn btn-sm btn-kv btn-default btn-outline-secondary', close: 'btn btn-sm btn-kv btn-default btn-outline-secondary' }, previewTemplates: {}, previewContentTemplates: {}, preferIconicPreview: !1, preferIconicZoomPreview: !1, allowedPreviewTypes: void 0, allowedPreviewMimeTypes: null, allowedFileTypes: null, allowedFileExtensions: null, defaultPreviewContent: null, customLayoutTags: {}, customPreviewTags: {}, previewFileIcon: '<i class="icon-file"></i>', previewFileIconClass: 'file-other-icon', previewFileIconSettings: {}, previewFileExtSettings: {}, buttonLabelClass: 'hidden-xs', browseIcon: '<i class="icon-folder-open"></i>&nbsp;', browseClass: 'btn btn-primary', removeIcon: '<i class="icon-trash"></i>', removeClass: 'btn btn-default btn-secondary', cancelIcon: '<i class="icon-ban-circle"></i>', cancelClass: 'btn btn-default btn-secondary', uploadIcon: '<i class="icon-upload"></i>', uploadClass: 'btn btn-default btn-secondary', uploadUrl: null, uploadUrlThumb: null, uploadAsync: !0, uploadExtraData: {}, zoomModalHeight: 480, minImageWidth: null, minImageHeight: null, maxImageWidth: null, maxImageHeight: null, resizeImage: !1, resizePreference: 'width', resizeQuality: 0.92, resizeDefaultImageType: 'image/jpeg', resizeIfSizeMoreThan: 0, minFileSize: 0, maxFileSize: 0, maxFilePreviewSize: 25600, minFileCount: 0, maxFileCount: 0, validateInitialCount: !1, msgValidationErrorClass: 'text-danger', msgValidationErrorIcon: '<i class="icon-exclamation-sign"></i> ', msgErrorClass: 'file-error-message', progressThumbClass: 'progress-bar bg-success progress-bar-success progress-bar-striped active', progressClass: 'progress-bar bg-success progress-bar-success progress-bar-striped active', progressCompleteClass: 'progress-bar bg-success progress-bar-success', progressErrorClass: 'progress-bar bg-danger progress-bar-danger', progressUploadThreshold: 99, previewFileType: 'image', elCaptionContainer: null, elCaptionText: null, elPreviewContainer: null, elPreviewImage: null, elPreviewStatus: null, elErrorContainer: null, errorCloseButton: t.closeButton('kv-error-close'), slugCallback: null, dropZoneEnabled: !0, dropZoneTitleClass: 'file-drop-zone-title', fileActionSettings: {}, otherActionButtons: '', textEncoding: 'UTF-8', ajaxSettings: {}, ajaxDeleteSettings: {}, showAjaxErrorDetails: !0, mergeAjaxCallbacks: !1, mergeAjaxDeleteCallbacks: !1, retryErrorUploads: !0, reversePreviewOrder: !1 }, e.fn.fileinputLocales.en = { fileSingle: 'file', filePlural: 'files', browseLabel: 'Browse &hellip;', removeLabel: 'Remove', removeTitle: 'Clear selected files', cancelLabel: 'Cancel', cancelTitle: 'Abort ongoing upload', uploadLabel: 'Upload', uploadTitle: 'Upload selected files', msgNo: 'No', msgNoFilesSelected: 'No files selected', msgCancelled: 'Cancelled', msgPlaceholder: 'Select {files}...', msgZoomModalHeading: 'Detailed Preview', msgFileRequired: 'You must select a file to upload.', msgSizeTooSmall: 'File "{name}" (<b>{size} KB</b>) is too small and must be larger than <b>{minSize} KB</b>.', msgSizeTooLarge: 'File "{name}" (<b>{size} KB</b>) exceeds maximum allowed upload size of <b>{maxSize} KB</b>.', msgFilesTooLess: 'You must select at least <b>{n}</b> {files} to upload.', msgFilesTooMany: 'Number of files selected for upload <b>({n})</b> exceeds maximum allowed limit of <b>{m}</b>.', msgFileNotFound: 'File "{name}" not found!', msgFileSecured: 'Security restrictions prevent reading the file "{name}".', msgFileNotReadable: 'File "{name}" is not readable.', msgFilePreviewAborted: 'File preview aborted for "{name}".', msgFilePreviewError: 'An error occurred while reading the file "{name}".', msgInvalidFileName: 'Invalid or unsupported characters in file name "{name}".', msgInvalidFileType: 'Invalid type for file "{name}". Only "{types}" files are supported.', msgInvalidFileExtension: 'Invalid extension for file "{name}". Only "{extensions}" files are supported.', msgFileTypes: { image: 'image', html: 'HTML', text: 'text', video: 'video', audio: 'audio', flash: 'flash', pdf: 'PDF', object: 'object' }, msgUploadAborted: 'The file upload was aborted', msgUploadThreshold: 'Processing...', msgUploadBegin: 'Initializing...', msgUploadEnd: 'Done', msgUploadEmpty: 'No valid data available for upload.', msgUploadError: 'Error', msgValidationError: 'Validation Error', msgLoading: 'Loading file {index} of {files} &hellip;', msgProgress: 'Loading file {index} of {files} - {name} - {percent}% completed.', msgSelected: '{n} {files} selected', msgFoldersNotAllowed: 'Drag & drop files only! {n} folder(s) dropped were skipped.', msgImageWidthSmall: 'Width of image file "{name}" must be at least {size} px.', msgImageHeightSmall: 'Height of image file "{name}" must be at least {size} px.', msgImageWidthLarge: 'Width of image file "{name}" cannot exceed {size} px.', msgImageHeightLarge: 'Height of image file "{name}" cannot exceed {size} px.', msgImageResizeError: 'Could not get the image dimensions to resize.', msgImageResizeException: 'Error while resizing the image.<pre>{errors}</pre>', msgAjaxError: 'Something went wrong with the {operation} operation. Please try again later!', msgAjaxProgressError: '{operation} failed', ajaxOperations: { deleteThumb: 'file delete', uploadThumb: 'file upload', uploadBatch: 'batch file upload', uploadExtra: 'form data upload' }, dropZoneTitle: 'Drag & drop files here &hellip;', dropZoneClickTitle: '<br>(or click to select {files})', previewZoomButtonTitles: { prev: 'View previous file', next: 'View next file', toggleheader: 'Toggle header', fullscreen: 'Toggle full screen', borderless: 'Toggle borderless mode', close: 'Close detailed preview' }, usePdfRenderer() { const e = !!window.MSInputMethodContext && !!document.documentMode; return !!navigator.userAgent.match(/(iPod|iPhone|iPad|Android)/i) || e }, pdfRendererUrl: '', pdfRendererTemplate: '<iframe class="kv-preview-data file-preview-pdf" src="{renderer}?file={data}" {style}></iframe>' }, e.fn.fileinput.Constructor = i, e(document).ready(() => { const t = e('input.file[type=file]'); t.length && t.fileinput() })
}))
